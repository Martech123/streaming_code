package eth_pkg

import scala.math.{pow, log, ceil}
import util.Random
import chisel3._
import chisel3.util._
import chisel3.core.dontTouch
import scala.collection.mutable.ArrayBuffer
import scala.util.control._
import LocalFunction._

class DbgEthCRC32 extends Module {
  val io = IO (new Bundle {
    val data   =  Input (UInt(8.W))
    val enable =  Input (Bool())
    val start  =  Input (Bool())
    val crc    =  Output(UInt(32.W))
  })

  // polynomial: x^32 + x^26 + x^23 + x^22 + x^16 + x^12 + x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x^1 + 1
  // data width: 8
  // convention: the first serial bit is D[7]
  
  val c = RegInit("hffff_ffff".U(32.W))
  val d = WireInit(0.U(8.W))
  val newcrc = WireInit(VecInit(Seq.fill(32)(0.U(1.W))))

  d := Cat(io.data(0), io.data(1), io.data(2),io.data(3),io.data(4),io.data(5),io.data(6),io.data(7))

  newcrc(0)  := d(6) ^ d(0) ^ c(24) ^ c(30);
  newcrc(1)  := d(7) ^ d(6) ^ d(1) ^ d(0) ^ c(24) ^ c(25) ^ c(30) ^ c(31);
  newcrc(2)  := d(7) ^ d(6) ^ d(2) ^ d(1) ^ d(0) ^ c(24) ^ c(25) ^ c(26) ^ c(30) ^ c(31);
  newcrc(3)  := d(7) ^ d(3) ^ d(2) ^ d(1) ^ c(25) ^ c(26) ^ c(27) ^ c(31);
  newcrc(4)  := d(6) ^ d(4) ^ d(3) ^ d(2) ^ d(0) ^ c(24) ^ c(26) ^ c(27) ^ c(28) ^ c(30);
  newcrc(5)  := d(7) ^ d(6) ^ d(5) ^ d(4) ^ d(3) ^ d(1) ^ d(0) ^ c(24) ^ c(25) ^ c(27) ^ c(28) ^ c(29) ^ c(30) ^ c(31);
  newcrc(6)  := d(7) ^ d(6) ^ d(5) ^ d(4) ^ d(2) ^ d(1) ^ c(25) ^ c(26) ^ c(28) ^ c(29) ^ c(30) ^ c(31);
  newcrc(7)  := d(7) ^ d(5) ^ d(3) ^ d(2) ^ d(0) ^ c(24) ^ c(26) ^ c(27) ^ c(29) ^ c(31);
  newcrc(8)  := d(4) ^ d(3) ^ d(1) ^ d(0) ^ c(0) ^ c(24) ^ c(25) ^ c(27) ^ c(28);
  newcrc(9)  := d(5) ^ d(4) ^ d(2) ^ d(1) ^ c(1) ^ c(25) ^ c(26) ^ c(28) ^ c(29);
  newcrc(10) := d(5) ^ d(3) ^ d(2) ^ d(0) ^ c(2) ^ c(24) ^ c(26) ^ c(27) ^ c(29);
  newcrc(11) := d(4) ^ d(3) ^ d(1) ^ d(0) ^ c(3) ^ c(24) ^ c(25) ^ c(27) ^ c(28);
  newcrc(12) := d(6) ^ d(5) ^ d(4) ^ d(2) ^ d(1) ^ d(0) ^ c(4) ^ c(24) ^ c(25) ^ c(26) ^ c(28) ^ c(29) ^ c(30);
  newcrc(13) := d(7) ^ d(6) ^ d(5) ^ d(3) ^ d(2) ^ d(1) ^ c(5) ^ c(25) ^ c(26) ^ c(27) ^ c(29) ^ c(30) ^ c(31);
  newcrc(14) := d(7) ^ d(6) ^ d(4) ^ d(3) ^ d(2) ^ c(6) ^ c(26) ^ c(27) ^ c(28) ^ c(30) ^ c(31);
  newcrc(15) := d(7) ^ d(5) ^ d(4) ^ d(3) ^ c(7) ^ c(27) ^ c(28) ^ c(29) ^ c(31);
  newcrc(16) := d(5) ^ d(4) ^ d(0) ^ c(8) ^ c(24) ^ c(28) ^ c(29);
  newcrc(17) := d(6) ^ d(5) ^ d(1) ^ c(9) ^ c(25) ^ c(29) ^ c(30);
  newcrc(18) := d(7) ^ d(6) ^ d(2) ^ c(10) ^ c(26) ^ c(30) ^ c(31);
  newcrc(19) := d(7) ^ d(3) ^ c(11) ^ c(27) ^ c(31);
  newcrc(20) := d(4) ^ c(12) ^ c(28);
  newcrc(21) := d(5) ^ c(13) ^ c(29);
  newcrc(22) := d(0) ^ c(14) ^ c(24);
  newcrc(23) := d(6) ^ d(1) ^ d(0) ^ c(15) ^ c(24) ^ c(25) ^ c(30);
  newcrc(24) := d(7) ^ d(2) ^ d(1) ^ c(16) ^ c(25) ^ c(26) ^ c(31);
  newcrc(25) := d(3) ^ d(2) ^ c(17) ^ c(26) ^ c(27);
  newcrc(26) := d(6) ^ d(4) ^ d(3) ^ d(0) ^ c(18) ^ c(24) ^ c(27) ^ c(28) ^ c(30);
  newcrc(27) := d(7) ^ d(5) ^ d(4) ^ d(1) ^ c(19) ^ c(25) ^ c(28) ^ c(29) ^ c(31);
  newcrc(28) := d(6) ^ d(5) ^ d(2) ^ c(20) ^ c(26) ^ c(29) ^ c(30);
  newcrc(29) := d(7) ^ d(6) ^ d(3) ^ c(21) ^ c(27) ^ c(30) ^ c(31);
  newcrc(30) := d(7) ^ d(4) ^ c(22) ^ c(28) ^ c(31);
  newcrc(31) := d(5) ^ c(23) ^ c(29);

  when (!io.start) {
    c := "hffff_ffff".U
  } .elsewhen (io.enable) {
    c := newcrc.asTypeOf(UInt(32.W))
  } .otherwise {
    c := c
  }

  val crc_r = WireInit(0.U(32.W))
  crc_r := ~c

  io.crc := Cat(crc_r(0) ,crc_r(1) ,crc_r(2) ,crc_r(3) ,crc_r(4) ,crc_r(5) ,crc_r(6) ,crc_r(7) ,
                crc_r(8) ,crc_r(9) ,crc_r(10),crc_r(11),crc_r(12),crc_r(13),crc_r(14),crc_r(15),
                crc_r(16),crc_r(17),crc_r(18),crc_r(19),crc_r(20),crc_r(21),crc_r(22),crc_r(23),
                crc_r(24),crc_r(25),crc_r(26),crc_r(27),crc_r(28),crc_r(29),crc_r(30),crc_r(31))

}

class DbgEthCRC32_D3 extends Module {
  val io = IO (new Bundle {
    val data_in = Input (UInt(3.W))
    val crc_en  = Input (Bool())
    val crc_out = Output(UInt(32.W))
  })

//-----------------------------------------------------------------------------
// Copyright (C) 2009 OutputLogic.com 
// This source file may be used and distributed without restriction 
// provided that this copyright statement is not removed from the file 
// and that any derivative work contains the original copyright notice 
// and the associated disclaimer. 
// 
// THIS SOURCE FILE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS 
// OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED	
// WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. 
//-----------------------------------------------------------------------------
// CRC module for data[2:0] ,   crc[31:0]=1+x^1+x^2+x^4+x^5+x^7+x^8+x^10+x^11+x^12+x^16+x^22+x^23+x^26+x^32;
//-----------------------------------------------------------------------------

  val lfsr_q = RegInit("hffffffff".U(32.W))
  val lfsr_c = RegInit(0.U(32.W))

  io.crc_out := lfsr_q

  lfsr_c(0)  := lfsr_q(29) ^ io.data_in(0)
  lfsr_c(1)  := lfsr_q(29) ^ lfsr_q(30) ^ io.data_in(0) ^ io.data_in(1)
  lfsr_c(2)  := lfsr_q(29) ^ lfsr_q(30) ^ lfsr_q(31) ^ io.data_in(0) ^ io.data_in(1) ^ io.data_in(2)
  lfsr_c(3)  := lfsr_q(0) ^ lfsr_q(30) ^ lfsr_q(31) ^ io.data_in(1) ^ io.data_in(2)
  lfsr_c(4)  := lfsr_q(1) ^ lfsr_q(29) ^ lfsr_q(31) ^ io.data_in(0) ^ io.data_in(2)
  lfsr_c(5)  := lfsr_q(2) ^ lfsr_q(29) ^ lfsr_q(30) ^ io.data_in(0) ^ io.data_in(1)
  lfsr_c(6)  := lfsr_q(3) ^ lfsr_q(30) ^ lfsr_q(31) ^ io.data_in(1) ^ io.data_in(2)
  lfsr_c(7)  := lfsr_q(4) ^ lfsr_q(29) ^ lfsr_q(31) ^ io.data_in(0) ^ io.data_in(2)
  lfsr_c(8)  := lfsr_q(5) ^ lfsr_q(29) ^ lfsr_q(30) ^ io.data_in(0) ^ io.data_in(1)
  lfsr_c(9)  := lfsr_q(6) ^ lfsr_q(30) ^ lfsr_q(31) ^ io.data_in(1) ^ io.data_in(2)
  lfsr_c(10) := lfsr_q(7) ^ lfsr_q(29) ^ lfsr_q(31) ^ io.data_in(0) ^ io.data_in(2)
  lfsr_c(11) := lfsr_q(8) ^ lfsr_q(29) ^ lfsr_q(30) ^ io.data_in(0) ^ io.data_in(1)
  lfsr_c(12) := lfsr_q(9) ^ lfsr_q(29) ^ lfsr_q(30) ^ lfsr_q(31) ^ io.data_in(0) ^ io.data_in(1) ^ io.data_in(2)
  lfsr_c(13) := lfsr_q(10) ^ lfsr_q(30) ^ lfsr_q(31) ^ io.data_in(1) ^ io.data_in(2)
  lfsr_c(14) := lfsr_q(11) ^ lfsr_q(31) ^ io.data_in(2)
  lfsr_c(15) := lfsr_q(12)
  lfsr_c(16) := lfsr_q(13) ^ lfsr_q(29) ^ io.data_in(0)
  lfsr_c(17) := lfsr_q(14) ^ lfsr_q(30) ^ io.data_in(1)
  lfsr_c(18) := lfsr_q(15) ^ lfsr_q(31) ^ io.data_in(2)
  lfsr_c(19) := lfsr_q(16)
  lfsr_c(20) := lfsr_q(17)
  lfsr_c(21) := lfsr_q(18)
  lfsr_c(22) := lfsr_q(19) ^ lfsr_q(29) ^ io.data_in(0)
  lfsr_c(23) := lfsr_q(20) ^ lfsr_q(29) ^ lfsr_q(30) ^ io.data_in(0) ^ io.data_in(1)
  lfsr_c(24) := lfsr_q(21) ^ lfsr_q(30) ^ lfsr_q(31) ^ io.data_in(1) ^ io.data_in(2)
  lfsr_c(25) := lfsr_q(22) ^ lfsr_q(31) ^ io.data_in(2)
  lfsr_c(26) := lfsr_q(23) ^ lfsr_q(29) ^ io.data_in(0)
  lfsr_c(27) := lfsr_q(24) ^ lfsr_q(30) ^ io.data_in(1)
  lfsr_c(28) := lfsr_q(25) ^ lfsr_q(31) ^ io.data_in(2)
  lfsr_c(29) := lfsr_q(26)
  lfsr_c(30) := lfsr_q(27)
  lfsr_c(31) := lfsr_q(28)

  lfsr_q := Mux(io.crc_en, lfsr_c, lfsr_q)
}

class DbgEthFcsPadding extends Module {
  val io = IO (new Bundle {
    val rx_en  = Input (Bool())
    val rx_dat = Input (UInt(8.W))
    val tx_en  = Output(Bool())
    val tx_dat = Output(UInt(8.W))
  })

  val crc32_d8 = Module (new DbgEthCRC32)

  val sIdle :: sPreamble :: sDATA :: sCRC1 :: sCRC2 :: Nil = Enum(5)
  val state   = RegInit(sIdle)

  val counter     = RegInit(0.U(8.W))
  val crc_enable  = RegInit(false.B)
  val crc_out     = WireInit(0.U(32.W))
  val crc_out_r   = RegInit(0.U(32.W))
  val tx_en       = RegInit(false.B)
  val tx_dat      = RegInit(0.U(8.W))

  val rx_valid_r5 = ShiftRegister(io.rx_en,  5)
  val rx_data_r5  = ShiftRegister(io.rx_dat, 5)

  switch (state) {
    is (sIdle) {
      counter := 0.U
      crc_enable := false.B
      when (risingedge(rx_valid_r5)) {
        when (rx_data_r5 === 0x55.U) {
          state := sPreamble
          tx_en := true.B
          tx_dat := rx_data_r5
        }
      } .otherwise {
        tx_en := false.B
        tx_dat := 0.U
      }
    }
    is (sPreamble) {
      tx_dat := rx_data_r5
      counter := counter + 1.U
      when (counter === (8 - 1).U) {
        // if do not find 0xD5; go back to sIdle
        state := sIdle
      } .elsewhen (rx_data_r5 === 0xD5.U) {
        state := sDATA
        counter := 0.U
        crc_enable := true.B
      }
    }
    is (sDATA) {
      tx_dat := rx_data_r5
      when (!io.rx_en) {
        state := sCRC1
        counter := 0.U
        crc_enable := false.B
      }
    }
    is (sCRC1) {
      state := sCRC2
      crc_out_r := crc_out >> 8
      tx_dat := crc_out(7, 0)
      counter := counter + 1.U
    }
    is (sCRC2) {
      crc_out_r := crc_out_r >> 8
      counter := counter + 1.U
      when (counter === 4.U) {
        state := sIdle
        tx_en := false.B
        tx_dat := 0.U
      } .otherwise {
        tx_dat := crc_out_r(7, 0)
      }
    }
  }

  crc32_d8.io.data   <> rx_data_r5
  crc32_d8.io.enable <> crc_enable
  crc32_d8.io.start  <> crc_enable
  crc32_d8.io.crc    <> crc_out

  io.tx_en  := tx_en
  io.tx_dat := tx_dat
}

class DbgEthFcsCheck extends BlackBox with HasBlackBoxInline {
  val io = IO (new Bundle {
    val clock  = Input (Clock())
    val reset  = Input (Bool())
    val rx_en  = Input (Bool())
    val rx_dat = Input (UInt(8.W))
    val error  = Output(Bool())
  })

  setInline(s"DbgEthFcsCheck.v",
  s"""
    |module DbgEthFcsCheck (
    |  input          clock,
    |  input          reset,
    |  input          rx_en,
    |  input  [7 :0]  rx_dat,
    |  output         error
    |);
    |
    |wire [31:0] crc_out;
    |
    |reg  [7:0]  gmii_rx_data0;
    |reg  [7:0]  gmii_rx_data1;
    |reg  [7:0]  gmii_rx_data2;
    |reg  [7:0]  gmii_rx_data3;
    |reg  [7:0]  gmii_rx_data4;
    |reg         gmii_rx_dv0;
    |reg         gmii_rx_dv1;
    |reg         gmii_rx_dv2;
    |reg         gmii_rx_dv3;
    |reg         gmii_rx_dv4;
    |
    |
    |always @(posedge clock) begin
    |  if (reset) begin
    |    gmii_rx_data0 <= 8'b0;
    |    gmii_rx_data1 <= 8'b0;
    |    gmii_rx_data2 <= 8'b0;
    |    gmii_rx_data3 <= 8'b0;
    |    gmii_rx_data4 <= 8'b0;
    |    gmii_rx_dv0   <= 1'b0;
    |    gmii_rx_dv1   <= 1'b0;
    |    gmii_rx_dv2   <= 1'b0;
    |    gmii_rx_dv3   <= 1'b0;
    |    gmii_rx_dv4   <= 1'b0;
    |  end
    |  else begin
    |    gmii_rx_data0 <= rx_dat;
    |    gmii_rx_data1 <= gmii_rx_data0;
    |    gmii_rx_data2 <= gmii_rx_data1;
    |    gmii_rx_data3 <= gmii_rx_data2;
    |    gmii_rx_data4 <= gmii_rx_data3;
    |    gmii_rx_dv0   <= rx_en;
    |    gmii_rx_dv1   <= gmii_rx_dv0;
    |    gmii_rx_dv2   <= gmii_rx_dv1;
    |    gmii_rx_dv3   <= gmii_rx_dv2;
    |    gmii_rx_dv4   <= gmii_rx_dv3;
    |  end
    |end
    |
    |//----- FSM --------------------------------
    |parameter IDLE                 = 4'b0001;
    |parameter WAIT_PREAMBLE_BYPASS = 4'b0010;
    |parameter CRC_START            = 4'b0100;
    |parameter CRC_CHECK            = 4'b1000;
    |
    |reg [3:0] state;
    |reg [3:0] next_state;
    |
    |/* internal variable */
    |reg [3:0] wait_preamble_bypass_cntr_r;
    |
    |always @(posedge clock) begin
    |  if (reset) begin
    |    state <= IDLE; 
    |  end
    |  else begin
    |    state <= next_state;
    |  end
    |end
    |
    |always @* begin
    |  if (reset) begin
    |    next_state = IDLE;
    |  end
    |  else begin
    |    case (state)
    |      IDLE: begin
    |        if (rx_en)
    |          next_state = WAIT_PREAMBLE_BYPASS;
    |        else
    |          next_state = IDLE;
    |      end
    |      WAIT_PREAMBLE_BYPASS: begin
    |        if(gmii_rx_data4 == 8'h55 &&
    |           gmii_rx_data3 == 8'h55 &&
    |           gmii_rx_data2 == 8'h55 &&
    |           gmii_rx_data1 == 8'h55 &&
    |           gmii_rx_data0 == 8'hd5) begin
    |             next_state = CRC_START;
    |        end
    |        else if (wait_preamble_bypass_cntr_r > 'd8)
    |          next_state = CRC_START;
    |        else
    |          next_state = WAIT_PREAMBLE_BYPASS;
    |      end
    |      CRC_START: begin
    |        if (~rx_en)
    |          next_state = CRC_CHECK;
    |        else
    |          next_state = CRC_START;
    |      end
    |      CRC_CHECK: begin
    |        next_state = IDLE;
    |      end
    |      default: begin
    |        next_state = IDLE;
    |      end
    |    endcase
    |  end
    |end
    |
    |reg [127:0] crc_shift_r;
    |reg [31: 0] crc_orig_r;
    |reg         crc_err_r; /* outdated */
    |
    |wire        pack_crc_en;
    |
    |always @(posedge clock) begin
    |  if (reset) begin
    |    wait_preamble_bypass_cntr_r <= 4'd0;
    |    crc_shift_r <= 128'b0;
    |    crc_orig_r <= 32'b0;
    |    crc_err_r <= 1'b0;
    |  end
    |  else begin
    |    case (state)
    |      IDLE: begin
    |        wait_preamble_bypass_cntr_r <= 4'd0;
    |        crc_shift_r <= 64'b0;
    |        crc_orig_r <= 32'b0;
    |        crc_err_r <= 1'b0;
    |      end
    |      WAIT_PREAMBLE_BYPASS: begin
    |        wait_preamble_bypass_cntr_r <= wait_preamble_bypass_cntr_r + 1'b1;
    |      end
    |      CRC_START: begin
    |        crc_shift_r <= {crc_shift_r[95:0], crc_out};
    |        crc_orig_r <= {rx_dat, crc_orig_r[31:8]};
    |      end
    |      CRC_CHECK: begin
    |        if (crc_shift_r[127:96] == crc_orig_r)
    |          crc_err_r <= 1'b0;
    |        else
    |          crc_err_r <= 1'b1;
    |      end
    |      default: begin
    |        wait_preamble_bypass_cntr_r <= 4'd0;
    |        crc_shift_r <= 64'b0;
    |        crc_orig_r <= 32'b0;
    |        crc_err_r <= 1'b0;
    |      end
    |    endcase
    |  end
    |end
    |
    |wire crc_err_c;
    |
    |assign crc_err_c = (next_state == CRC_CHECK)? ((crc_shift_r[127:96] == crc_orig_r)? 1'b0 : 1'b1) : 1'b0;
    |assign pack_crc_en = (next_state == CRC_START)?  1'b1 : 1'b0;
    |
    |reg crc_err_r0;
    |
    |always @(posedge clock) begin
    |  crc_err_r0 <= crc_err_c;
    |end
    |
    |assign error = crc_err_r0;
    |
    |wire        crc_en;
    |wire [7 :0] data;
    |
    |assign crc_en = pack_crc_en;
    |assign data   = pack_crc_en ? rx_dat : 8'b0;
    |
    |DbgEthCRC32 crc_gen (
    |  .clock     (clock      ),
    |  .reset     (reset      ),
    |  .io_data   (data       ),
    |  .io_enable (crc_en     ),
    |  .io_start  (crc_en     ),
    |  .io_crc    (crc_out    )
    |);
    |
    |endmodule
  """.stripMargin)
}

class DbgEthFcsPaddingTB extends Module {
  val io = IO (new Bundle {
    val start  = Input (Bool())
    val finish = Output(Bool())
    val error  = Output(Bool())
  })

  val eth_fcs_padding = Module (new DbgEthFcsPadding)
  eth_fcs_padding.io <> DontCare

  val eth_frame_data_vec = Array( 
    "h55".U, "h55".U, "h55".U, "h55".U,
    "h55".U, "h55".U, "h55".U, "hd5".U,
    "hda".U, "h02".U, "h03".U, "h04".U,
    "h05".U, "h06".U, "h5a".U, "h02".U,
    "h03".U, "h04".U, "h05".U, "h06".U,
    "h00".U, "h2e".U, "h01".U, "h02".U,
    "h03".U, "h04".U, "h05".U, "h06".U,
    "h07".U, "h08".U, "h09".U, "h0a".U,
    "h0b".U, "h0c".U, "h0d".U, "h0e".U,
    "h0f".U, "h10".U, "h11".U, "h12".U,
    "h13".U, "h14".U, "h15".U, "h16".U,
    "h17".U, "h18".U, "h19".U, "h1a".U,
    "h1b".U, "h1c".U, "h1d".U, "h1e".U,
    "h1f".U, "h20".U, "h21".U, "h22".U,
    "h23".U, "h24".U, "h25".U, "h26".U,
    "h27".U, "h28".U, "h29".U, "h2a".U,
    "h2b".U, "h2c".U, "h2d".U, "h2e".U,
    "h14".U, "h19".U, "hd1".U, "hdd".U,
  )

  io <> DontCare

  val sIdle :: sWork :: sFinish :: Nil = Enum(3)
  val state_tx = RegInit(sIdle)
  val error = RegInit(false.B)

  val eth_frame = RegInit(VecInit(eth_frame_data_vec))

  val tx_en  = RegInit(false.B)
  val tx_dat = RegInit(0.U(8.W))
  val tx_idx = RegInit(0.U(16.W))

  switch (state_tx) {
    is (sIdle) {
      tx_idx := 0.U
      when (io.start) {
        state_tx := sWork
        tx_idx := tx_idx + 1.U
        tx_en := true.B
      }
    }
    is (sWork) {
      tx_idx := tx_idx + 1.U
      when (tx_idx === eth_frame_data_vec.length.U) {
        state_tx := sFinish
        tx_en := false.B
      }
    }
  }

  val state_rx = RegInit(sIdle)
  val rx_idx = RegInit(0.U(16.W))

  switch (state_rx) {
    is (sIdle) {
      rx_idx := 0.U
      error := false.B
      when (eth_fcs_padding.io.tx_en) {
        state_rx := sWork
        rx_idx := rx_idx + 1.U
      }
    }
    is (sWork) {
      rx_idx := rx_idx + 1.U
      when (!eth_fcs_padding.io.tx_en) {
        state_rx := sFinish
      } .otherwise {
        when (eth_frame(rx_idx) =/= eth_fcs_padding.io.tx_dat) {
          error := true.B
        }
      }
    }
  }

  tx_dat := eth_frame(tx_idx)

  eth_fcs_padding.io.rx_en  <> tx_en
  eth_fcs_padding.io.rx_dat <> tx_dat

  dontTouch(eth_fcs_padding.io)

  io.finish := state_tx === sFinish && state_rx === sFinish
  io.error  := error
}
