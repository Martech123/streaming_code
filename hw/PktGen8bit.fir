;buildInfoPackage: chisel3, version: 3.2-SNAPSHOT, scalaVersion: 2.12.6
circuit PktGen8bit : 
  module EthCRC32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip data : UInt<8>, flip enable : UInt<1>, flip start : UInt<1>, crc : UInt<32>}
    
    reg c : UInt<32>, clock with : (reset => (reset, UInt<32>("h0ffffffff"))) @[EthFcsPadding.scala 24:18]
    wire d : UInt<8>
    d <= UInt<8>("h00")
    wire _T : UInt<1>[32] @[EthFcsPadding.scala 26:32]
    _T[0] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[1] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[2] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[3] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[4] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[5] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[6] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[7] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[8] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[9] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[10] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[11] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[12] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[13] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[14] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[15] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[16] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[17] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[18] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[19] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[20] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[21] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[22] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[23] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[24] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[25] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[26] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[27] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[28] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[29] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[30] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    _T[31] <= UInt<1>("h00") @[EthFcsPadding.scala 26:32]
    wire newcrc : UInt<1>[32]
    newcrc[0] <= _T[0]
    newcrc[1] <= _T[1]
    newcrc[2] <= _T[2]
    newcrc[3] <= _T[3]
    newcrc[4] <= _T[4]
    newcrc[5] <= _T[5]
    newcrc[6] <= _T[6]
    newcrc[7] <= _T[7]
    newcrc[8] <= _T[8]
    newcrc[9] <= _T[9]
    newcrc[10] <= _T[10]
    newcrc[11] <= _T[11]
    newcrc[12] <= _T[12]
    newcrc[13] <= _T[13]
    newcrc[14] <= _T[14]
    newcrc[15] <= _T[15]
    newcrc[16] <= _T[16]
    newcrc[17] <= _T[17]
    newcrc[18] <= _T[18]
    newcrc[19] <= _T[19]
    newcrc[20] <= _T[20]
    newcrc[21] <= _T[21]
    newcrc[22] <= _T[22]
    newcrc[23] <= _T[23]
    newcrc[24] <= _T[24]
    newcrc[25] <= _T[25]
    newcrc[26] <= _T[26]
    newcrc[27] <= _T[27]
    newcrc[28] <= _T[28]
    newcrc[29] <= _T[29]
    newcrc[30] <= _T[30]
    newcrc[31] <= _T[31]
    node _T_1 = bits(io.data, 0, 0) @[EthFcsPadding.scala 28:19]
    node _T_2 = bits(io.data, 1, 1) @[EthFcsPadding.scala 28:31]
    node _T_3 = bits(io.data, 2, 2) @[EthFcsPadding.scala 28:43]
    node _T_4 = bits(io.data, 3, 3) @[EthFcsPadding.scala 28:54]
    node _T_5 = bits(io.data, 4, 4) @[EthFcsPadding.scala 28:65]
    node _T_6 = bits(io.data, 5, 5) @[EthFcsPadding.scala 28:76]
    node _T_7 = bits(io.data, 6, 6) @[EthFcsPadding.scala 28:87]
    node _T_8 = bits(io.data, 7, 7) @[EthFcsPadding.scala 28:98]
    node _T_9 = cat(_T_7, _T_8) @[Cat.scala 29:58]
    node _T_10 = cat(_T_5, _T_6) @[Cat.scala 29:58]
    node _T_11 = cat(_T_10, _T_9) @[Cat.scala 29:58]
    node _T_12 = cat(_T_3, _T_4) @[Cat.scala 29:58]
    node _T_13 = cat(_T_1, _T_2) @[Cat.scala 29:58]
    node _T_14 = cat(_T_13, _T_12) @[Cat.scala 29:58]
    node _T_15 = cat(_T_14, _T_11) @[Cat.scala 29:58]
    d <= _T_15 @[EthFcsPadding.scala 28:5]
    node _T_16 = bits(d, 6, 6) @[EthFcsPadding.scala 30:18]
    node _T_17 = bits(d, 0, 0) @[EthFcsPadding.scala 30:25]
    node _T_18 = xor(_T_16, _T_17) @[EthFcsPadding.scala 30:22]
    node _T_19 = bits(c, 24, 24) @[EthFcsPadding.scala 30:32]
    node _T_20 = xor(_T_18, _T_19) @[EthFcsPadding.scala 30:29]
    node _T_21 = bits(c, 30, 30) @[EthFcsPadding.scala 30:40]
    node _T_22 = xor(_T_20, _T_21) @[EthFcsPadding.scala 30:37]
    newcrc[0] <= _T_22 @[EthFcsPadding.scala 30:14]
    node _T_23 = bits(d, 7, 7) @[EthFcsPadding.scala 31:18]
    node _T_24 = bits(d, 6, 6) @[EthFcsPadding.scala 31:25]
    node _T_25 = xor(_T_23, _T_24) @[EthFcsPadding.scala 31:22]
    node _T_26 = bits(d, 1, 1) @[EthFcsPadding.scala 31:32]
    node _T_27 = xor(_T_25, _T_26) @[EthFcsPadding.scala 31:29]
    node _T_28 = bits(d, 0, 0) @[EthFcsPadding.scala 31:39]
    node _T_29 = xor(_T_27, _T_28) @[EthFcsPadding.scala 31:36]
    node _T_30 = bits(c, 24, 24) @[EthFcsPadding.scala 31:46]
    node _T_31 = xor(_T_29, _T_30) @[EthFcsPadding.scala 31:43]
    node _T_32 = bits(c, 25, 25) @[EthFcsPadding.scala 31:54]
    node _T_33 = xor(_T_31, _T_32) @[EthFcsPadding.scala 31:51]
    node _T_34 = bits(c, 30, 30) @[EthFcsPadding.scala 31:62]
    node _T_35 = xor(_T_33, _T_34) @[EthFcsPadding.scala 31:59]
    node _T_36 = bits(c, 31, 31) @[EthFcsPadding.scala 31:70]
    node _T_37 = xor(_T_35, _T_36) @[EthFcsPadding.scala 31:67]
    newcrc[1] <= _T_37 @[EthFcsPadding.scala 31:14]
    node _T_38 = bits(d, 7, 7) @[EthFcsPadding.scala 32:18]
    node _T_39 = bits(d, 6, 6) @[EthFcsPadding.scala 32:25]
    node _T_40 = xor(_T_38, _T_39) @[EthFcsPadding.scala 32:22]
    node _T_41 = bits(d, 2, 2) @[EthFcsPadding.scala 32:32]
    node _T_42 = xor(_T_40, _T_41) @[EthFcsPadding.scala 32:29]
    node _T_43 = bits(d, 1, 1) @[EthFcsPadding.scala 32:39]
    node _T_44 = xor(_T_42, _T_43) @[EthFcsPadding.scala 32:36]
    node _T_45 = bits(d, 0, 0) @[EthFcsPadding.scala 32:46]
    node _T_46 = xor(_T_44, _T_45) @[EthFcsPadding.scala 32:43]
    node _T_47 = bits(c, 24, 24) @[EthFcsPadding.scala 32:53]
    node _T_48 = xor(_T_46, _T_47) @[EthFcsPadding.scala 32:50]
    node _T_49 = bits(c, 25, 25) @[EthFcsPadding.scala 32:61]
    node _T_50 = xor(_T_48, _T_49) @[EthFcsPadding.scala 32:58]
    node _T_51 = bits(c, 26, 26) @[EthFcsPadding.scala 32:69]
    node _T_52 = xor(_T_50, _T_51) @[EthFcsPadding.scala 32:66]
    node _T_53 = bits(c, 30, 30) @[EthFcsPadding.scala 32:77]
    node _T_54 = xor(_T_52, _T_53) @[EthFcsPadding.scala 32:74]
    node _T_55 = bits(c, 31, 31) @[EthFcsPadding.scala 32:85]
    node _T_56 = xor(_T_54, _T_55) @[EthFcsPadding.scala 32:82]
    newcrc[2] <= _T_56 @[EthFcsPadding.scala 32:14]
    node _T_57 = bits(d, 7, 7) @[EthFcsPadding.scala 33:18]
    node _T_58 = bits(d, 3, 3) @[EthFcsPadding.scala 33:25]
    node _T_59 = xor(_T_57, _T_58) @[EthFcsPadding.scala 33:22]
    node _T_60 = bits(d, 2, 2) @[EthFcsPadding.scala 33:32]
    node _T_61 = xor(_T_59, _T_60) @[EthFcsPadding.scala 33:29]
    node _T_62 = bits(d, 1, 1) @[EthFcsPadding.scala 33:39]
    node _T_63 = xor(_T_61, _T_62) @[EthFcsPadding.scala 33:36]
    node _T_64 = bits(c, 25, 25) @[EthFcsPadding.scala 33:46]
    node _T_65 = xor(_T_63, _T_64) @[EthFcsPadding.scala 33:43]
    node _T_66 = bits(c, 26, 26) @[EthFcsPadding.scala 33:54]
    node _T_67 = xor(_T_65, _T_66) @[EthFcsPadding.scala 33:51]
    node _T_68 = bits(c, 27, 27) @[EthFcsPadding.scala 33:62]
    node _T_69 = xor(_T_67, _T_68) @[EthFcsPadding.scala 33:59]
    node _T_70 = bits(c, 31, 31) @[EthFcsPadding.scala 33:70]
    node _T_71 = xor(_T_69, _T_70) @[EthFcsPadding.scala 33:67]
    newcrc[3] <= _T_71 @[EthFcsPadding.scala 33:14]
    node _T_72 = bits(d, 6, 6) @[EthFcsPadding.scala 34:18]
    node _T_73 = bits(d, 4, 4) @[EthFcsPadding.scala 34:25]
    node _T_74 = xor(_T_72, _T_73) @[EthFcsPadding.scala 34:22]
    node _T_75 = bits(d, 3, 3) @[EthFcsPadding.scala 34:32]
    node _T_76 = xor(_T_74, _T_75) @[EthFcsPadding.scala 34:29]
    node _T_77 = bits(d, 2, 2) @[EthFcsPadding.scala 34:39]
    node _T_78 = xor(_T_76, _T_77) @[EthFcsPadding.scala 34:36]
    node _T_79 = bits(d, 0, 0) @[EthFcsPadding.scala 34:46]
    node _T_80 = xor(_T_78, _T_79) @[EthFcsPadding.scala 34:43]
    node _T_81 = bits(c, 24, 24) @[EthFcsPadding.scala 34:53]
    node _T_82 = xor(_T_80, _T_81) @[EthFcsPadding.scala 34:50]
    node _T_83 = bits(c, 26, 26) @[EthFcsPadding.scala 34:61]
    node _T_84 = xor(_T_82, _T_83) @[EthFcsPadding.scala 34:58]
    node _T_85 = bits(c, 27, 27) @[EthFcsPadding.scala 34:69]
    node _T_86 = xor(_T_84, _T_85) @[EthFcsPadding.scala 34:66]
    node _T_87 = bits(c, 28, 28) @[EthFcsPadding.scala 34:77]
    node _T_88 = xor(_T_86, _T_87) @[EthFcsPadding.scala 34:74]
    node _T_89 = bits(c, 30, 30) @[EthFcsPadding.scala 34:85]
    node _T_90 = xor(_T_88, _T_89) @[EthFcsPadding.scala 34:82]
    newcrc[4] <= _T_90 @[EthFcsPadding.scala 34:14]
    node _T_91 = bits(d, 7, 7) @[EthFcsPadding.scala 35:18]
    node _T_92 = bits(d, 6, 6) @[EthFcsPadding.scala 35:25]
    node _T_93 = xor(_T_91, _T_92) @[EthFcsPadding.scala 35:22]
    node _T_94 = bits(d, 5, 5) @[EthFcsPadding.scala 35:32]
    node _T_95 = xor(_T_93, _T_94) @[EthFcsPadding.scala 35:29]
    node _T_96 = bits(d, 4, 4) @[EthFcsPadding.scala 35:39]
    node _T_97 = xor(_T_95, _T_96) @[EthFcsPadding.scala 35:36]
    node _T_98 = bits(d, 3, 3) @[EthFcsPadding.scala 35:46]
    node _T_99 = xor(_T_97, _T_98) @[EthFcsPadding.scala 35:43]
    node _T_100 = bits(d, 1, 1) @[EthFcsPadding.scala 35:53]
    node _T_101 = xor(_T_99, _T_100) @[EthFcsPadding.scala 35:50]
    node _T_102 = bits(d, 0, 0) @[EthFcsPadding.scala 35:60]
    node _T_103 = xor(_T_101, _T_102) @[EthFcsPadding.scala 35:57]
    node _T_104 = bits(c, 24, 24) @[EthFcsPadding.scala 35:67]
    node _T_105 = xor(_T_103, _T_104) @[EthFcsPadding.scala 35:64]
    node _T_106 = bits(c, 25, 25) @[EthFcsPadding.scala 35:75]
    node _T_107 = xor(_T_105, _T_106) @[EthFcsPadding.scala 35:72]
    node _T_108 = bits(c, 27, 27) @[EthFcsPadding.scala 35:83]
    node _T_109 = xor(_T_107, _T_108) @[EthFcsPadding.scala 35:80]
    node _T_110 = bits(c, 28, 28) @[EthFcsPadding.scala 35:91]
    node _T_111 = xor(_T_109, _T_110) @[EthFcsPadding.scala 35:88]
    node _T_112 = bits(c, 29, 29) @[EthFcsPadding.scala 35:99]
    node _T_113 = xor(_T_111, _T_112) @[EthFcsPadding.scala 35:96]
    node _T_114 = bits(c, 30, 30) @[EthFcsPadding.scala 35:107]
    node _T_115 = xor(_T_113, _T_114) @[EthFcsPadding.scala 35:104]
    node _T_116 = bits(c, 31, 31) @[EthFcsPadding.scala 35:115]
    node _T_117 = xor(_T_115, _T_116) @[EthFcsPadding.scala 35:112]
    newcrc[5] <= _T_117 @[EthFcsPadding.scala 35:14]
    node _T_118 = bits(d, 7, 7) @[EthFcsPadding.scala 36:18]
    node _T_119 = bits(d, 6, 6) @[EthFcsPadding.scala 36:25]
    node _T_120 = xor(_T_118, _T_119) @[EthFcsPadding.scala 36:22]
    node _T_121 = bits(d, 5, 5) @[EthFcsPadding.scala 36:32]
    node _T_122 = xor(_T_120, _T_121) @[EthFcsPadding.scala 36:29]
    node _T_123 = bits(d, 4, 4) @[EthFcsPadding.scala 36:39]
    node _T_124 = xor(_T_122, _T_123) @[EthFcsPadding.scala 36:36]
    node _T_125 = bits(d, 2, 2) @[EthFcsPadding.scala 36:46]
    node _T_126 = xor(_T_124, _T_125) @[EthFcsPadding.scala 36:43]
    node _T_127 = bits(d, 1, 1) @[EthFcsPadding.scala 36:53]
    node _T_128 = xor(_T_126, _T_127) @[EthFcsPadding.scala 36:50]
    node _T_129 = bits(c, 25, 25) @[EthFcsPadding.scala 36:60]
    node _T_130 = xor(_T_128, _T_129) @[EthFcsPadding.scala 36:57]
    node _T_131 = bits(c, 26, 26) @[EthFcsPadding.scala 36:68]
    node _T_132 = xor(_T_130, _T_131) @[EthFcsPadding.scala 36:65]
    node _T_133 = bits(c, 28, 28) @[EthFcsPadding.scala 36:76]
    node _T_134 = xor(_T_132, _T_133) @[EthFcsPadding.scala 36:73]
    node _T_135 = bits(c, 29, 29) @[EthFcsPadding.scala 36:84]
    node _T_136 = xor(_T_134, _T_135) @[EthFcsPadding.scala 36:81]
    node _T_137 = bits(c, 30, 30) @[EthFcsPadding.scala 36:92]
    node _T_138 = xor(_T_136, _T_137) @[EthFcsPadding.scala 36:89]
    node _T_139 = bits(c, 31, 31) @[EthFcsPadding.scala 36:100]
    node _T_140 = xor(_T_138, _T_139) @[EthFcsPadding.scala 36:97]
    newcrc[6] <= _T_140 @[EthFcsPadding.scala 36:14]
    node _T_141 = bits(d, 7, 7) @[EthFcsPadding.scala 37:18]
    node _T_142 = bits(d, 5, 5) @[EthFcsPadding.scala 37:25]
    node _T_143 = xor(_T_141, _T_142) @[EthFcsPadding.scala 37:22]
    node _T_144 = bits(d, 3, 3) @[EthFcsPadding.scala 37:32]
    node _T_145 = xor(_T_143, _T_144) @[EthFcsPadding.scala 37:29]
    node _T_146 = bits(d, 2, 2) @[EthFcsPadding.scala 37:39]
    node _T_147 = xor(_T_145, _T_146) @[EthFcsPadding.scala 37:36]
    node _T_148 = bits(d, 0, 0) @[EthFcsPadding.scala 37:46]
    node _T_149 = xor(_T_147, _T_148) @[EthFcsPadding.scala 37:43]
    node _T_150 = bits(c, 24, 24) @[EthFcsPadding.scala 37:53]
    node _T_151 = xor(_T_149, _T_150) @[EthFcsPadding.scala 37:50]
    node _T_152 = bits(c, 26, 26) @[EthFcsPadding.scala 37:61]
    node _T_153 = xor(_T_151, _T_152) @[EthFcsPadding.scala 37:58]
    node _T_154 = bits(c, 27, 27) @[EthFcsPadding.scala 37:69]
    node _T_155 = xor(_T_153, _T_154) @[EthFcsPadding.scala 37:66]
    node _T_156 = bits(c, 29, 29) @[EthFcsPadding.scala 37:77]
    node _T_157 = xor(_T_155, _T_156) @[EthFcsPadding.scala 37:74]
    node _T_158 = bits(c, 31, 31) @[EthFcsPadding.scala 37:85]
    node _T_159 = xor(_T_157, _T_158) @[EthFcsPadding.scala 37:82]
    newcrc[7] <= _T_159 @[EthFcsPadding.scala 37:14]
    node _T_160 = bits(d, 4, 4) @[EthFcsPadding.scala 38:18]
    node _T_161 = bits(d, 3, 3) @[EthFcsPadding.scala 38:25]
    node _T_162 = xor(_T_160, _T_161) @[EthFcsPadding.scala 38:22]
    node _T_163 = bits(d, 1, 1) @[EthFcsPadding.scala 38:32]
    node _T_164 = xor(_T_162, _T_163) @[EthFcsPadding.scala 38:29]
    node _T_165 = bits(d, 0, 0) @[EthFcsPadding.scala 38:39]
    node _T_166 = xor(_T_164, _T_165) @[EthFcsPadding.scala 38:36]
    node _T_167 = bits(c, 0, 0) @[EthFcsPadding.scala 38:46]
    node _T_168 = xor(_T_166, _T_167) @[EthFcsPadding.scala 38:43]
    node _T_169 = bits(c, 24, 24) @[EthFcsPadding.scala 38:53]
    node _T_170 = xor(_T_168, _T_169) @[EthFcsPadding.scala 38:50]
    node _T_171 = bits(c, 25, 25) @[EthFcsPadding.scala 38:61]
    node _T_172 = xor(_T_170, _T_171) @[EthFcsPadding.scala 38:58]
    node _T_173 = bits(c, 27, 27) @[EthFcsPadding.scala 38:69]
    node _T_174 = xor(_T_172, _T_173) @[EthFcsPadding.scala 38:66]
    node _T_175 = bits(c, 28, 28) @[EthFcsPadding.scala 38:77]
    node _T_176 = xor(_T_174, _T_175) @[EthFcsPadding.scala 38:74]
    newcrc[8] <= _T_176 @[EthFcsPadding.scala 38:14]
    node _T_177 = bits(d, 5, 5) @[EthFcsPadding.scala 39:18]
    node _T_178 = bits(d, 4, 4) @[EthFcsPadding.scala 39:25]
    node _T_179 = xor(_T_177, _T_178) @[EthFcsPadding.scala 39:22]
    node _T_180 = bits(d, 2, 2) @[EthFcsPadding.scala 39:32]
    node _T_181 = xor(_T_179, _T_180) @[EthFcsPadding.scala 39:29]
    node _T_182 = bits(d, 1, 1) @[EthFcsPadding.scala 39:39]
    node _T_183 = xor(_T_181, _T_182) @[EthFcsPadding.scala 39:36]
    node _T_184 = bits(c, 1, 1) @[EthFcsPadding.scala 39:46]
    node _T_185 = xor(_T_183, _T_184) @[EthFcsPadding.scala 39:43]
    node _T_186 = bits(c, 25, 25) @[EthFcsPadding.scala 39:53]
    node _T_187 = xor(_T_185, _T_186) @[EthFcsPadding.scala 39:50]
    node _T_188 = bits(c, 26, 26) @[EthFcsPadding.scala 39:61]
    node _T_189 = xor(_T_187, _T_188) @[EthFcsPadding.scala 39:58]
    node _T_190 = bits(c, 28, 28) @[EthFcsPadding.scala 39:69]
    node _T_191 = xor(_T_189, _T_190) @[EthFcsPadding.scala 39:66]
    node _T_192 = bits(c, 29, 29) @[EthFcsPadding.scala 39:77]
    node _T_193 = xor(_T_191, _T_192) @[EthFcsPadding.scala 39:74]
    newcrc[9] <= _T_193 @[EthFcsPadding.scala 39:14]
    node _T_194 = bits(d, 5, 5) @[EthFcsPadding.scala 40:18]
    node _T_195 = bits(d, 3, 3) @[EthFcsPadding.scala 40:25]
    node _T_196 = xor(_T_194, _T_195) @[EthFcsPadding.scala 40:22]
    node _T_197 = bits(d, 2, 2) @[EthFcsPadding.scala 40:32]
    node _T_198 = xor(_T_196, _T_197) @[EthFcsPadding.scala 40:29]
    node _T_199 = bits(d, 0, 0) @[EthFcsPadding.scala 40:39]
    node _T_200 = xor(_T_198, _T_199) @[EthFcsPadding.scala 40:36]
    node _T_201 = bits(c, 2, 2) @[EthFcsPadding.scala 40:46]
    node _T_202 = xor(_T_200, _T_201) @[EthFcsPadding.scala 40:43]
    node _T_203 = bits(c, 24, 24) @[EthFcsPadding.scala 40:53]
    node _T_204 = xor(_T_202, _T_203) @[EthFcsPadding.scala 40:50]
    node _T_205 = bits(c, 26, 26) @[EthFcsPadding.scala 40:61]
    node _T_206 = xor(_T_204, _T_205) @[EthFcsPadding.scala 40:58]
    node _T_207 = bits(c, 27, 27) @[EthFcsPadding.scala 40:69]
    node _T_208 = xor(_T_206, _T_207) @[EthFcsPadding.scala 40:66]
    node _T_209 = bits(c, 29, 29) @[EthFcsPadding.scala 40:77]
    node _T_210 = xor(_T_208, _T_209) @[EthFcsPadding.scala 40:74]
    newcrc[10] <= _T_210 @[EthFcsPadding.scala 40:14]
    node _T_211 = bits(d, 4, 4) @[EthFcsPadding.scala 41:18]
    node _T_212 = bits(d, 3, 3) @[EthFcsPadding.scala 41:25]
    node _T_213 = xor(_T_211, _T_212) @[EthFcsPadding.scala 41:22]
    node _T_214 = bits(d, 1, 1) @[EthFcsPadding.scala 41:32]
    node _T_215 = xor(_T_213, _T_214) @[EthFcsPadding.scala 41:29]
    node _T_216 = bits(d, 0, 0) @[EthFcsPadding.scala 41:39]
    node _T_217 = xor(_T_215, _T_216) @[EthFcsPadding.scala 41:36]
    node _T_218 = bits(c, 3, 3) @[EthFcsPadding.scala 41:46]
    node _T_219 = xor(_T_217, _T_218) @[EthFcsPadding.scala 41:43]
    node _T_220 = bits(c, 24, 24) @[EthFcsPadding.scala 41:53]
    node _T_221 = xor(_T_219, _T_220) @[EthFcsPadding.scala 41:50]
    node _T_222 = bits(c, 25, 25) @[EthFcsPadding.scala 41:61]
    node _T_223 = xor(_T_221, _T_222) @[EthFcsPadding.scala 41:58]
    node _T_224 = bits(c, 27, 27) @[EthFcsPadding.scala 41:69]
    node _T_225 = xor(_T_223, _T_224) @[EthFcsPadding.scala 41:66]
    node _T_226 = bits(c, 28, 28) @[EthFcsPadding.scala 41:77]
    node _T_227 = xor(_T_225, _T_226) @[EthFcsPadding.scala 41:74]
    newcrc[11] <= _T_227 @[EthFcsPadding.scala 41:14]
    node _T_228 = bits(d, 6, 6) @[EthFcsPadding.scala 42:18]
    node _T_229 = bits(d, 5, 5) @[EthFcsPadding.scala 42:25]
    node _T_230 = xor(_T_228, _T_229) @[EthFcsPadding.scala 42:22]
    node _T_231 = bits(d, 4, 4) @[EthFcsPadding.scala 42:32]
    node _T_232 = xor(_T_230, _T_231) @[EthFcsPadding.scala 42:29]
    node _T_233 = bits(d, 2, 2) @[EthFcsPadding.scala 42:39]
    node _T_234 = xor(_T_232, _T_233) @[EthFcsPadding.scala 42:36]
    node _T_235 = bits(d, 1, 1) @[EthFcsPadding.scala 42:46]
    node _T_236 = xor(_T_234, _T_235) @[EthFcsPadding.scala 42:43]
    node _T_237 = bits(d, 0, 0) @[EthFcsPadding.scala 42:53]
    node _T_238 = xor(_T_236, _T_237) @[EthFcsPadding.scala 42:50]
    node _T_239 = bits(c, 4, 4) @[EthFcsPadding.scala 42:60]
    node _T_240 = xor(_T_238, _T_239) @[EthFcsPadding.scala 42:57]
    node _T_241 = bits(c, 24, 24) @[EthFcsPadding.scala 42:67]
    node _T_242 = xor(_T_240, _T_241) @[EthFcsPadding.scala 42:64]
    node _T_243 = bits(c, 25, 25) @[EthFcsPadding.scala 42:75]
    node _T_244 = xor(_T_242, _T_243) @[EthFcsPadding.scala 42:72]
    node _T_245 = bits(c, 26, 26) @[EthFcsPadding.scala 42:83]
    node _T_246 = xor(_T_244, _T_245) @[EthFcsPadding.scala 42:80]
    node _T_247 = bits(c, 28, 28) @[EthFcsPadding.scala 42:91]
    node _T_248 = xor(_T_246, _T_247) @[EthFcsPadding.scala 42:88]
    node _T_249 = bits(c, 29, 29) @[EthFcsPadding.scala 42:99]
    node _T_250 = xor(_T_248, _T_249) @[EthFcsPadding.scala 42:96]
    node _T_251 = bits(c, 30, 30) @[EthFcsPadding.scala 42:107]
    node _T_252 = xor(_T_250, _T_251) @[EthFcsPadding.scala 42:104]
    newcrc[12] <= _T_252 @[EthFcsPadding.scala 42:14]
    node _T_253 = bits(d, 7, 7) @[EthFcsPadding.scala 43:18]
    node _T_254 = bits(d, 6, 6) @[EthFcsPadding.scala 43:25]
    node _T_255 = xor(_T_253, _T_254) @[EthFcsPadding.scala 43:22]
    node _T_256 = bits(d, 5, 5) @[EthFcsPadding.scala 43:32]
    node _T_257 = xor(_T_255, _T_256) @[EthFcsPadding.scala 43:29]
    node _T_258 = bits(d, 3, 3) @[EthFcsPadding.scala 43:39]
    node _T_259 = xor(_T_257, _T_258) @[EthFcsPadding.scala 43:36]
    node _T_260 = bits(d, 2, 2) @[EthFcsPadding.scala 43:46]
    node _T_261 = xor(_T_259, _T_260) @[EthFcsPadding.scala 43:43]
    node _T_262 = bits(d, 1, 1) @[EthFcsPadding.scala 43:53]
    node _T_263 = xor(_T_261, _T_262) @[EthFcsPadding.scala 43:50]
    node _T_264 = bits(c, 5, 5) @[EthFcsPadding.scala 43:60]
    node _T_265 = xor(_T_263, _T_264) @[EthFcsPadding.scala 43:57]
    node _T_266 = bits(c, 25, 25) @[EthFcsPadding.scala 43:67]
    node _T_267 = xor(_T_265, _T_266) @[EthFcsPadding.scala 43:64]
    node _T_268 = bits(c, 26, 26) @[EthFcsPadding.scala 43:75]
    node _T_269 = xor(_T_267, _T_268) @[EthFcsPadding.scala 43:72]
    node _T_270 = bits(c, 27, 27) @[EthFcsPadding.scala 43:83]
    node _T_271 = xor(_T_269, _T_270) @[EthFcsPadding.scala 43:80]
    node _T_272 = bits(c, 29, 29) @[EthFcsPadding.scala 43:91]
    node _T_273 = xor(_T_271, _T_272) @[EthFcsPadding.scala 43:88]
    node _T_274 = bits(c, 30, 30) @[EthFcsPadding.scala 43:99]
    node _T_275 = xor(_T_273, _T_274) @[EthFcsPadding.scala 43:96]
    node _T_276 = bits(c, 31, 31) @[EthFcsPadding.scala 43:107]
    node _T_277 = xor(_T_275, _T_276) @[EthFcsPadding.scala 43:104]
    newcrc[13] <= _T_277 @[EthFcsPadding.scala 43:14]
    node _T_278 = bits(d, 7, 7) @[EthFcsPadding.scala 44:18]
    node _T_279 = bits(d, 6, 6) @[EthFcsPadding.scala 44:25]
    node _T_280 = xor(_T_278, _T_279) @[EthFcsPadding.scala 44:22]
    node _T_281 = bits(d, 4, 4) @[EthFcsPadding.scala 44:32]
    node _T_282 = xor(_T_280, _T_281) @[EthFcsPadding.scala 44:29]
    node _T_283 = bits(d, 3, 3) @[EthFcsPadding.scala 44:39]
    node _T_284 = xor(_T_282, _T_283) @[EthFcsPadding.scala 44:36]
    node _T_285 = bits(d, 2, 2) @[EthFcsPadding.scala 44:46]
    node _T_286 = xor(_T_284, _T_285) @[EthFcsPadding.scala 44:43]
    node _T_287 = bits(c, 6, 6) @[EthFcsPadding.scala 44:53]
    node _T_288 = xor(_T_286, _T_287) @[EthFcsPadding.scala 44:50]
    node _T_289 = bits(c, 26, 26) @[EthFcsPadding.scala 44:60]
    node _T_290 = xor(_T_288, _T_289) @[EthFcsPadding.scala 44:57]
    node _T_291 = bits(c, 27, 27) @[EthFcsPadding.scala 44:68]
    node _T_292 = xor(_T_290, _T_291) @[EthFcsPadding.scala 44:65]
    node _T_293 = bits(c, 28, 28) @[EthFcsPadding.scala 44:76]
    node _T_294 = xor(_T_292, _T_293) @[EthFcsPadding.scala 44:73]
    node _T_295 = bits(c, 30, 30) @[EthFcsPadding.scala 44:84]
    node _T_296 = xor(_T_294, _T_295) @[EthFcsPadding.scala 44:81]
    node _T_297 = bits(c, 31, 31) @[EthFcsPadding.scala 44:92]
    node _T_298 = xor(_T_296, _T_297) @[EthFcsPadding.scala 44:89]
    newcrc[14] <= _T_298 @[EthFcsPadding.scala 44:14]
    node _T_299 = bits(d, 7, 7) @[EthFcsPadding.scala 45:18]
    node _T_300 = bits(d, 5, 5) @[EthFcsPadding.scala 45:25]
    node _T_301 = xor(_T_299, _T_300) @[EthFcsPadding.scala 45:22]
    node _T_302 = bits(d, 4, 4) @[EthFcsPadding.scala 45:32]
    node _T_303 = xor(_T_301, _T_302) @[EthFcsPadding.scala 45:29]
    node _T_304 = bits(d, 3, 3) @[EthFcsPadding.scala 45:39]
    node _T_305 = xor(_T_303, _T_304) @[EthFcsPadding.scala 45:36]
    node _T_306 = bits(c, 7, 7) @[EthFcsPadding.scala 45:46]
    node _T_307 = xor(_T_305, _T_306) @[EthFcsPadding.scala 45:43]
    node _T_308 = bits(c, 27, 27) @[EthFcsPadding.scala 45:53]
    node _T_309 = xor(_T_307, _T_308) @[EthFcsPadding.scala 45:50]
    node _T_310 = bits(c, 28, 28) @[EthFcsPadding.scala 45:61]
    node _T_311 = xor(_T_309, _T_310) @[EthFcsPadding.scala 45:58]
    node _T_312 = bits(c, 29, 29) @[EthFcsPadding.scala 45:69]
    node _T_313 = xor(_T_311, _T_312) @[EthFcsPadding.scala 45:66]
    node _T_314 = bits(c, 31, 31) @[EthFcsPadding.scala 45:77]
    node _T_315 = xor(_T_313, _T_314) @[EthFcsPadding.scala 45:74]
    newcrc[15] <= _T_315 @[EthFcsPadding.scala 45:14]
    node _T_316 = bits(d, 5, 5) @[EthFcsPadding.scala 46:18]
    node _T_317 = bits(d, 4, 4) @[EthFcsPadding.scala 46:25]
    node _T_318 = xor(_T_316, _T_317) @[EthFcsPadding.scala 46:22]
    node _T_319 = bits(d, 0, 0) @[EthFcsPadding.scala 46:32]
    node _T_320 = xor(_T_318, _T_319) @[EthFcsPadding.scala 46:29]
    node _T_321 = bits(c, 8, 8) @[EthFcsPadding.scala 46:39]
    node _T_322 = xor(_T_320, _T_321) @[EthFcsPadding.scala 46:36]
    node _T_323 = bits(c, 24, 24) @[EthFcsPadding.scala 46:46]
    node _T_324 = xor(_T_322, _T_323) @[EthFcsPadding.scala 46:43]
    node _T_325 = bits(c, 28, 28) @[EthFcsPadding.scala 46:54]
    node _T_326 = xor(_T_324, _T_325) @[EthFcsPadding.scala 46:51]
    node _T_327 = bits(c, 29, 29) @[EthFcsPadding.scala 46:62]
    node _T_328 = xor(_T_326, _T_327) @[EthFcsPadding.scala 46:59]
    newcrc[16] <= _T_328 @[EthFcsPadding.scala 46:14]
    node _T_329 = bits(d, 6, 6) @[EthFcsPadding.scala 47:18]
    node _T_330 = bits(d, 5, 5) @[EthFcsPadding.scala 47:25]
    node _T_331 = xor(_T_329, _T_330) @[EthFcsPadding.scala 47:22]
    node _T_332 = bits(d, 1, 1) @[EthFcsPadding.scala 47:32]
    node _T_333 = xor(_T_331, _T_332) @[EthFcsPadding.scala 47:29]
    node _T_334 = bits(c, 9, 9) @[EthFcsPadding.scala 47:39]
    node _T_335 = xor(_T_333, _T_334) @[EthFcsPadding.scala 47:36]
    node _T_336 = bits(c, 25, 25) @[EthFcsPadding.scala 47:46]
    node _T_337 = xor(_T_335, _T_336) @[EthFcsPadding.scala 47:43]
    node _T_338 = bits(c, 29, 29) @[EthFcsPadding.scala 47:54]
    node _T_339 = xor(_T_337, _T_338) @[EthFcsPadding.scala 47:51]
    node _T_340 = bits(c, 30, 30) @[EthFcsPadding.scala 47:62]
    node _T_341 = xor(_T_339, _T_340) @[EthFcsPadding.scala 47:59]
    newcrc[17] <= _T_341 @[EthFcsPadding.scala 47:14]
    node _T_342 = bits(d, 7, 7) @[EthFcsPadding.scala 48:18]
    node _T_343 = bits(d, 6, 6) @[EthFcsPadding.scala 48:25]
    node _T_344 = xor(_T_342, _T_343) @[EthFcsPadding.scala 48:22]
    node _T_345 = bits(d, 2, 2) @[EthFcsPadding.scala 48:32]
    node _T_346 = xor(_T_344, _T_345) @[EthFcsPadding.scala 48:29]
    node _T_347 = bits(c, 10, 10) @[EthFcsPadding.scala 48:39]
    node _T_348 = xor(_T_346, _T_347) @[EthFcsPadding.scala 48:36]
    node _T_349 = bits(c, 26, 26) @[EthFcsPadding.scala 48:47]
    node _T_350 = xor(_T_348, _T_349) @[EthFcsPadding.scala 48:44]
    node _T_351 = bits(c, 30, 30) @[EthFcsPadding.scala 48:55]
    node _T_352 = xor(_T_350, _T_351) @[EthFcsPadding.scala 48:52]
    node _T_353 = bits(c, 31, 31) @[EthFcsPadding.scala 48:63]
    node _T_354 = xor(_T_352, _T_353) @[EthFcsPadding.scala 48:60]
    newcrc[18] <= _T_354 @[EthFcsPadding.scala 48:14]
    node _T_355 = bits(d, 7, 7) @[EthFcsPadding.scala 49:18]
    node _T_356 = bits(d, 3, 3) @[EthFcsPadding.scala 49:25]
    node _T_357 = xor(_T_355, _T_356) @[EthFcsPadding.scala 49:22]
    node _T_358 = bits(c, 11, 11) @[EthFcsPadding.scala 49:32]
    node _T_359 = xor(_T_357, _T_358) @[EthFcsPadding.scala 49:29]
    node _T_360 = bits(c, 27, 27) @[EthFcsPadding.scala 49:40]
    node _T_361 = xor(_T_359, _T_360) @[EthFcsPadding.scala 49:37]
    node _T_362 = bits(c, 31, 31) @[EthFcsPadding.scala 49:48]
    node _T_363 = xor(_T_361, _T_362) @[EthFcsPadding.scala 49:45]
    newcrc[19] <= _T_363 @[EthFcsPadding.scala 49:14]
    node _T_364 = bits(d, 4, 4) @[EthFcsPadding.scala 50:18]
    node _T_365 = bits(c, 12, 12) @[EthFcsPadding.scala 50:25]
    node _T_366 = xor(_T_364, _T_365) @[EthFcsPadding.scala 50:22]
    node _T_367 = bits(c, 28, 28) @[EthFcsPadding.scala 50:33]
    node _T_368 = xor(_T_366, _T_367) @[EthFcsPadding.scala 50:30]
    newcrc[20] <= _T_368 @[EthFcsPadding.scala 50:14]
    node _T_369 = bits(d, 5, 5) @[EthFcsPadding.scala 51:18]
    node _T_370 = bits(c, 13, 13) @[EthFcsPadding.scala 51:25]
    node _T_371 = xor(_T_369, _T_370) @[EthFcsPadding.scala 51:22]
    node _T_372 = bits(c, 29, 29) @[EthFcsPadding.scala 51:33]
    node _T_373 = xor(_T_371, _T_372) @[EthFcsPadding.scala 51:30]
    newcrc[21] <= _T_373 @[EthFcsPadding.scala 51:14]
    node _T_374 = bits(d, 0, 0) @[EthFcsPadding.scala 52:18]
    node _T_375 = bits(c, 14, 14) @[EthFcsPadding.scala 52:25]
    node _T_376 = xor(_T_374, _T_375) @[EthFcsPadding.scala 52:22]
    node _T_377 = bits(c, 24, 24) @[EthFcsPadding.scala 52:33]
    node _T_378 = xor(_T_376, _T_377) @[EthFcsPadding.scala 52:30]
    newcrc[22] <= _T_378 @[EthFcsPadding.scala 52:14]
    node _T_379 = bits(d, 6, 6) @[EthFcsPadding.scala 53:18]
    node _T_380 = bits(d, 1, 1) @[EthFcsPadding.scala 53:25]
    node _T_381 = xor(_T_379, _T_380) @[EthFcsPadding.scala 53:22]
    node _T_382 = bits(d, 0, 0) @[EthFcsPadding.scala 53:32]
    node _T_383 = xor(_T_381, _T_382) @[EthFcsPadding.scala 53:29]
    node _T_384 = bits(c, 15, 15) @[EthFcsPadding.scala 53:39]
    node _T_385 = xor(_T_383, _T_384) @[EthFcsPadding.scala 53:36]
    node _T_386 = bits(c, 24, 24) @[EthFcsPadding.scala 53:47]
    node _T_387 = xor(_T_385, _T_386) @[EthFcsPadding.scala 53:44]
    node _T_388 = bits(c, 25, 25) @[EthFcsPadding.scala 53:55]
    node _T_389 = xor(_T_387, _T_388) @[EthFcsPadding.scala 53:52]
    node _T_390 = bits(c, 30, 30) @[EthFcsPadding.scala 53:63]
    node _T_391 = xor(_T_389, _T_390) @[EthFcsPadding.scala 53:60]
    newcrc[23] <= _T_391 @[EthFcsPadding.scala 53:14]
    node _T_392 = bits(d, 7, 7) @[EthFcsPadding.scala 54:18]
    node _T_393 = bits(d, 2, 2) @[EthFcsPadding.scala 54:25]
    node _T_394 = xor(_T_392, _T_393) @[EthFcsPadding.scala 54:22]
    node _T_395 = bits(d, 1, 1) @[EthFcsPadding.scala 54:32]
    node _T_396 = xor(_T_394, _T_395) @[EthFcsPadding.scala 54:29]
    node _T_397 = bits(c, 16, 16) @[EthFcsPadding.scala 54:39]
    node _T_398 = xor(_T_396, _T_397) @[EthFcsPadding.scala 54:36]
    node _T_399 = bits(c, 25, 25) @[EthFcsPadding.scala 54:47]
    node _T_400 = xor(_T_398, _T_399) @[EthFcsPadding.scala 54:44]
    node _T_401 = bits(c, 26, 26) @[EthFcsPadding.scala 54:55]
    node _T_402 = xor(_T_400, _T_401) @[EthFcsPadding.scala 54:52]
    node _T_403 = bits(c, 31, 31) @[EthFcsPadding.scala 54:63]
    node _T_404 = xor(_T_402, _T_403) @[EthFcsPadding.scala 54:60]
    newcrc[24] <= _T_404 @[EthFcsPadding.scala 54:14]
    node _T_405 = bits(d, 3, 3) @[EthFcsPadding.scala 55:18]
    node _T_406 = bits(d, 2, 2) @[EthFcsPadding.scala 55:25]
    node _T_407 = xor(_T_405, _T_406) @[EthFcsPadding.scala 55:22]
    node _T_408 = bits(c, 17, 17) @[EthFcsPadding.scala 55:32]
    node _T_409 = xor(_T_407, _T_408) @[EthFcsPadding.scala 55:29]
    node _T_410 = bits(c, 26, 26) @[EthFcsPadding.scala 55:40]
    node _T_411 = xor(_T_409, _T_410) @[EthFcsPadding.scala 55:37]
    node _T_412 = bits(c, 27, 27) @[EthFcsPadding.scala 55:48]
    node _T_413 = xor(_T_411, _T_412) @[EthFcsPadding.scala 55:45]
    newcrc[25] <= _T_413 @[EthFcsPadding.scala 55:14]
    node _T_414 = bits(d, 6, 6) @[EthFcsPadding.scala 56:18]
    node _T_415 = bits(d, 4, 4) @[EthFcsPadding.scala 56:25]
    node _T_416 = xor(_T_414, _T_415) @[EthFcsPadding.scala 56:22]
    node _T_417 = bits(d, 3, 3) @[EthFcsPadding.scala 56:32]
    node _T_418 = xor(_T_416, _T_417) @[EthFcsPadding.scala 56:29]
    node _T_419 = bits(d, 0, 0) @[EthFcsPadding.scala 56:39]
    node _T_420 = xor(_T_418, _T_419) @[EthFcsPadding.scala 56:36]
    node _T_421 = bits(c, 18, 18) @[EthFcsPadding.scala 56:46]
    node _T_422 = xor(_T_420, _T_421) @[EthFcsPadding.scala 56:43]
    node _T_423 = bits(c, 24, 24) @[EthFcsPadding.scala 56:54]
    node _T_424 = xor(_T_422, _T_423) @[EthFcsPadding.scala 56:51]
    node _T_425 = bits(c, 27, 27) @[EthFcsPadding.scala 56:62]
    node _T_426 = xor(_T_424, _T_425) @[EthFcsPadding.scala 56:59]
    node _T_427 = bits(c, 28, 28) @[EthFcsPadding.scala 56:70]
    node _T_428 = xor(_T_426, _T_427) @[EthFcsPadding.scala 56:67]
    node _T_429 = bits(c, 30, 30) @[EthFcsPadding.scala 56:78]
    node _T_430 = xor(_T_428, _T_429) @[EthFcsPadding.scala 56:75]
    newcrc[26] <= _T_430 @[EthFcsPadding.scala 56:14]
    node _T_431 = bits(d, 7, 7) @[EthFcsPadding.scala 57:18]
    node _T_432 = bits(d, 5, 5) @[EthFcsPadding.scala 57:25]
    node _T_433 = xor(_T_431, _T_432) @[EthFcsPadding.scala 57:22]
    node _T_434 = bits(d, 4, 4) @[EthFcsPadding.scala 57:32]
    node _T_435 = xor(_T_433, _T_434) @[EthFcsPadding.scala 57:29]
    node _T_436 = bits(d, 1, 1) @[EthFcsPadding.scala 57:39]
    node _T_437 = xor(_T_435, _T_436) @[EthFcsPadding.scala 57:36]
    node _T_438 = bits(c, 19, 19) @[EthFcsPadding.scala 57:46]
    node _T_439 = xor(_T_437, _T_438) @[EthFcsPadding.scala 57:43]
    node _T_440 = bits(c, 25, 25) @[EthFcsPadding.scala 57:54]
    node _T_441 = xor(_T_439, _T_440) @[EthFcsPadding.scala 57:51]
    node _T_442 = bits(c, 28, 28) @[EthFcsPadding.scala 57:62]
    node _T_443 = xor(_T_441, _T_442) @[EthFcsPadding.scala 57:59]
    node _T_444 = bits(c, 29, 29) @[EthFcsPadding.scala 57:70]
    node _T_445 = xor(_T_443, _T_444) @[EthFcsPadding.scala 57:67]
    node _T_446 = bits(c, 31, 31) @[EthFcsPadding.scala 57:78]
    node _T_447 = xor(_T_445, _T_446) @[EthFcsPadding.scala 57:75]
    newcrc[27] <= _T_447 @[EthFcsPadding.scala 57:14]
    node _T_448 = bits(d, 6, 6) @[EthFcsPadding.scala 58:18]
    node _T_449 = bits(d, 5, 5) @[EthFcsPadding.scala 58:25]
    node _T_450 = xor(_T_448, _T_449) @[EthFcsPadding.scala 58:22]
    node _T_451 = bits(d, 2, 2) @[EthFcsPadding.scala 58:32]
    node _T_452 = xor(_T_450, _T_451) @[EthFcsPadding.scala 58:29]
    node _T_453 = bits(c, 20, 20) @[EthFcsPadding.scala 58:39]
    node _T_454 = xor(_T_452, _T_453) @[EthFcsPadding.scala 58:36]
    node _T_455 = bits(c, 26, 26) @[EthFcsPadding.scala 58:47]
    node _T_456 = xor(_T_454, _T_455) @[EthFcsPadding.scala 58:44]
    node _T_457 = bits(c, 29, 29) @[EthFcsPadding.scala 58:55]
    node _T_458 = xor(_T_456, _T_457) @[EthFcsPadding.scala 58:52]
    node _T_459 = bits(c, 30, 30) @[EthFcsPadding.scala 58:63]
    node _T_460 = xor(_T_458, _T_459) @[EthFcsPadding.scala 58:60]
    newcrc[28] <= _T_460 @[EthFcsPadding.scala 58:14]
    node _T_461 = bits(d, 7, 7) @[EthFcsPadding.scala 59:18]
    node _T_462 = bits(d, 6, 6) @[EthFcsPadding.scala 59:25]
    node _T_463 = xor(_T_461, _T_462) @[EthFcsPadding.scala 59:22]
    node _T_464 = bits(d, 3, 3) @[EthFcsPadding.scala 59:32]
    node _T_465 = xor(_T_463, _T_464) @[EthFcsPadding.scala 59:29]
    node _T_466 = bits(c, 21, 21) @[EthFcsPadding.scala 59:39]
    node _T_467 = xor(_T_465, _T_466) @[EthFcsPadding.scala 59:36]
    node _T_468 = bits(c, 27, 27) @[EthFcsPadding.scala 59:47]
    node _T_469 = xor(_T_467, _T_468) @[EthFcsPadding.scala 59:44]
    node _T_470 = bits(c, 30, 30) @[EthFcsPadding.scala 59:55]
    node _T_471 = xor(_T_469, _T_470) @[EthFcsPadding.scala 59:52]
    node _T_472 = bits(c, 31, 31) @[EthFcsPadding.scala 59:63]
    node _T_473 = xor(_T_471, _T_472) @[EthFcsPadding.scala 59:60]
    newcrc[29] <= _T_473 @[EthFcsPadding.scala 59:14]
    node _T_474 = bits(d, 7, 7) @[EthFcsPadding.scala 60:18]
    node _T_475 = bits(d, 4, 4) @[EthFcsPadding.scala 60:25]
    node _T_476 = xor(_T_474, _T_475) @[EthFcsPadding.scala 60:22]
    node _T_477 = bits(c, 22, 22) @[EthFcsPadding.scala 60:32]
    node _T_478 = xor(_T_476, _T_477) @[EthFcsPadding.scala 60:29]
    node _T_479 = bits(c, 28, 28) @[EthFcsPadding.scala 60:40]
    node _T_480 = xor(_T_478, _T_479) @[EthFcsPadding.scala 60:37]
    node _T_481 = bits(c, 31, 31) @[EthFcsPadding.scala 60:48]
    node _T_482 = xor(_T_480, _T_481) @[EthFcsPadding.scala 60:45]
    newcrc[30] <= _T_482 @[EthFcsPadding.scala 60:14]
    node _T_483 = bits(d, 5, 5) @[EthFcsPadding.scala 61:18]
    node _T_484 = bits(c, 23, 23) @[EthFcsPadding.scala 61:25]
    node _T_485 = xor(_T_483, _T_484) @[EthFcsPadding.scala 61:22]
    node _T_486 = bits(c, 29, 29) @[EthFcsPadding.scala 61:33]
    node _T_487 = xor(_T_485, _T_486) @[EthFcsPadding.scala 61:30]
    newcrc[31] <= _T_487 @[EthFcsPadding.scala 61:14]
    node _T_488 = eq(io.start, UInt<1>("h00")) @[EthFcsPadding.scala 63:9]
    when _T_488 : @[EthFcsPadding.scala 63:20]
      c <= UInt<32>("h0ffffffff") @[EthFcsPadding.scala 64:7]
      skip @[EthFcsPadding.scala 63:20]
    else : @[EthFcsPadding.scala 65:27]
      when io.enable : @[EthFcsPadding.scala 65:27]
        wire _T_489 : UInt<32> @[EthFcsPadding.scala 66:25]
        node _T_490 = cat(newcrc[1], newcrc[0]) @[EthFcsPadding.scala 66:25]
        node _T_491 = cat(newcrc[3], newcrc[2]) @[EthFcsPadding.scala 66:25]
        node _T_492 = cat(_T_491, _T_490) @[EthFcsPadding.scala 66:25]
        node _T_493 = cat(newcrc[5], newcrc[4]) @[EthFcsPadding.scala 66:25]
        node _T_494 = cat(newcrc[7], newcrc[6]) @[EthFcsPadding.scala 66:25]
        node _T_495 = cat(_T_494, _T_493) @[EthFcsPadding.scala 66:25]
        node _T_496 = cat(_T_495, _T_492) @[EthFcsPadding.scala 66:25]
        node _T_497 = cat(newcrc[9], newcrc[8]) @[EthFcsPadding.scala 66:25]
        node _T_498 = cat(newcrc[11], newcrc[10]) @[EthFcsPadding.scala 66:25]
        node _T_499 = cat(_T_498, _T_497) @[EthFcsPadding.scala 66:25]
        node _T_500 = cat(newcrc[13], newcrc[12]) @[EthFcsPadding.scala 66:25]
        node _T_501 = cat(newcrc[15], newcrc[14]) @[EthFcsPadding.scala 66:25]
        node _T_502 = cat(_T_501, _T_500) @[EthFcsPadding.scala 66:25]
        node _T_503 = cat(_T_502, _T_499) @[EthFcsPadding.scala 66:25]
        node _T_504 = cat(_T_503, _T_496) @[EthFcsPadding.scala 66:25]
        node _T_505 = cat(newcrc[17], newcrc[16]) @[EthFcsPadding.scala 66:25]
        node _T_506 = cat(newcrc[19], newcrc[18]) @[EthFcsPadding.scala 66:25]
        node _T_507 = cat(_T_506, _T_505) @[EthFcsPadding.scala 66:25]
        node _T_508 = cat(newcrc[21], newcrc[20]) @[EthFcsPadding.scala 66:25]
        node _T_509 = cat(newcrc[23], newcrc[22]) @[EthFcsPadding.scala 66:25]
        node _T_510 = cat(_T_509, _T_508) @[EthFcsPadding.scala 66:25]
        node _T_511 = cat(_T_510, _T_507) @[EthFcsPadding.scala 66:25]
        node _T_512 = cat(newcrc[25], newcrc[24]) @[EthFcsPadding.scala 66:25]
        node _T_513 = cat(newcrc[27], newcrc[26]) @[EthFcsPadding.scala 66:25]
        node _T_514 = cat(_T_513, _T_512) @[EthFcsPadding.scala 66:25]
        node _T_515 = cat(newcrc[29], newcrc[28]) @[EthFcsPadding.scala 66:25]
        node _T_516 = cat(newcrc[31], newcrc[30]) @[EthFcsPadding.scala 66:25]
        node _T_517 = cat(_T_516, _T_515) @[EthFcsPadding.scala 66:25]
        node _T_518 = cat(_T_517, _T_514) @[EthFcsPadding.scala 66:25]
        node _T_519 = cat(_T_518, _T_511) @[EthFcsPadding.scala 66:25]
        node _T_520 = cat(_T_519, _T_504) @[EthFcsPadding.scala 66:25]
        _T_489 <= _T_520 @[EthFcsPadding.scala 66:25]
        c <= _T_489 @[EthFcsPadding.scala 66:7]
        skip @[EthFcsPadding.scala 65:27]
      else : @[EthFcsPadding.scala 67:16]
        c <= c @[EthFcsPadding.scala 68:7]
        skip @[EthFcsPadding.scala 67:16]
    wire crc_r : UInt<32>
    crc_r <= UInt<32>("h00")
    node _T_521 = not(c) @[EthFcsPadding.scala 72:12]
    crc_r <= _T_521 @[EthFcsPadding.scala 72:9]
    node _T_522 = bits(crc_r, 0, 0) @[EthFcsPadding.scala 74:22]
    node _T_523 = bits(crc_r, 1, 1) @[EthFcsPadding.scala 74:32]
    node _T_524 = bits(crc_r, 2, 2) @[EthFcsPadding.scala 74:42]
    node _T_525 = bits(crc_r, 3, 3) @[EthFcsPadding.scala 74:52]
    node _T_526 = bits(crc_r, 4, 4) @[EthFcsPadding.scala 74:62]
    node _T_527 = bits(crc_r, 5, 5) @[EthFcsPadding.scala 74:72]
    node _T_528 = bits(crc_r, 6, 6) @[EthFcsPadding.scala 74:82]
    node _T_529 = bits(crc_r, 7, 7) @[EthFcsPadding.scala 74:92]
    node _T_530 = bits(crc_r, 8, 8) @[EthFcsPadding.scala 75:22]
    node _T_531 = bits(crc_r, 9, 9) @[EthFcsPadding.scala 75:32]
    node _T_532 = bits(crc_r, 10, 10) @[EthFcsPadding.scala 75:42]
    node _T_533 = bits(crc_r, 11, 11) @[EthFcsPadding.scala 75:52]
    node _T_534 = bits(crc_r, 12, 12) @[EthFcsPadding.scala 75:62]
    node _T_535 = bits(crc_r, 13, 13) @[EthFcsPadding.scala 75:72]
    node _T_536 = bits(crc_r, 14, 14) @[EthFcsPadding.scala 75:82]
    node _T_537 = bits(crc_r, 15, 15) @[EthFcsPadding.scala 75:92]
    node _T_538 = bits(crc_r, 16, 16) @[EthFcsPadding.scala 76:22]
    node _T_539 = bits(crc_r, 17, 17) @[EthFcsPadding.scala 76:32]
    node _T_540 = bits(crc_r, 18, 18) @[EthFcsPadding.scala 76:42]
    node _T_541 = bits(crc_r, 19, 19) @[EthFcsPadding.scala 76:52]
    node _T_542 = bits(crc_r, 20, 20) @[EthFcsPadding.scala 76:62]
    node _T_543 = bits(crc_r, 21, 21) @[EthFcsPadding.scala 76:72]
    node _T_544 = bits(crc_r, 22, 22) @[EthFcsPadding.scala 76:82]
    node _T_545 = bits(crc_r, 23, 23) @[EthFcsPadding.scala 76:92]
    node _T_546 = bits(crc_r, 24, 24) @[EthFcsPadding.scala 77:22]
    node _T_547 = bits(crc_r, 25, 25) @[EthFcsPadding.scala 77:32]
    node _T_548 = bits(crc_r, 26, 26) @[EthFcsPadding.scala 77:42]
    node _T_549 = bits(crc_r, 27, 27) @[EthFcsPadding.scala 77:52]
    node _T_550 = bits(crc_r, 28, 28) @[EthFcsPadding.scala 77:62]
    node _T_551 = bits(crc_r, 29, 29) @[EthFcsPadding.scala 77:72]
    node _T_552 = bits(crc_r, 30, 30) @[EthFcsPadding.scala 77:82]
    node _T_553 = bits(crc_r, 31, 31) @[EthFcsPadding.scala 77:92]
    node _T_554 = cat(_T_552, _T_553) @[Cat.scala 29:58]
    node _T_555 = cat(_T_550, _T_551) @[Cat.scala 29:58]
    node _T_556 = cat(_T_555, _T_554) @[Cat.scala 29:58]
    node _T_557 = cat(_T_548, _T_549) @[Cat.scala 29:58]
    node _T_558 = cat(_T_546, _T_547) @[Cat.scala 29:58]
    node _T_559 = cat(_T_558, _T_557) @[Cat.scala 29:58]
    node _T_560 = cat(_T_559, _T_556) @[Cat.scala 29:58]
    node _T_561 = cat(_T_544, _T_545) @[Cat.scala 29:58]
    node _T_562 = cat(_T_542, _T_543) @[Cat.scala 29:58]
    node _T_563 = cat(_T_562, _T_561) @[Cat.scala 29:58]
    node _T_564 = cat(_T_540, _T_541) @[Cat.scala 29:58]
    node _T_565 = cat(_T_538, _T_539) @[Cat.scala 29:58]
    node _T_566 = cat(_T_565, _T_564) @[Cat.scala 29:58]
    node _T_567 = cat(_T_566, _T_563) @[Cat.scala 29:58]
    node _T_568 = cat(_T_567, _T_560) @[Cat.scala 29:58]
    node _T_569 = cat(_T_536, _T_537) @[Cat.scala 29:58]
    node _T_570 = cat(_T_534, _T_535) @[Cat.scala 29:58]
    node _T_571 = cat(_T_570, _T_569) @[Cat.scala 29:58]
    node _T_572 = cat(_T_532, _T_533) @[Cat.scala 29:58]
    node _T_573 = cat(_T_530, _T_531) @[Cat.scala 29:58]
    node _T_574 = cat(_T_573, _T_572) @[Cat.scala 29:58]
    node _T_575 = cat(_T_574, _T_571) @[Cat.scala 29:58]
    node _T_576 = cat(_T_528, _T_529) @[Cat.scala 29:58]
    node _T_577 = cat(_T_526, _T_527) @[Cat.scala 29:58]
    node _T_578 = cat(_T_577, _T_576) @[Cat.scala 29:58]
    node _T_579 = cat(_T_524, _T_525) @[Cat.scala 29:58]
    node _T_580 = cat(_T_522, _T_523) @[Cat.scala 29:58]
    node _T_581 = cat(_T_580, _T_579) @[Cat.scala 29:58]
    node _T_582 = cat(_T_581, _T_578) @[Cat.scala 29:58]
    node _T_583 = cat(_T_582, _T_575) @[Cat.scala 29:58]
    node _T_584 = cat(_T_583, _T_568) @[Cat.scala 29:58]
    io.crc <= _T_584 @[EthFcsPadding.scala 74:10]
    
  module EthFcsPadding : 
    input clock : Clock
    input reset : Reset
    output io : {flip rx_en : UInt<1>, flip rx_dat : UInt<8>, tx_en : UInt<1>, tx_dat : UInt<8>}
    
    inst crc32_d8 of EthCRC32 @[EthFcsPadding.scala 89:25]
    crc32_d8.clock <= clock
    crc32_d8.reset <= reset
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[EthFcsPadding.scala 92:24]
    reg counter : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[EthFcsPadding.scala 94:28]
    reg crc_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EthFcsPadding.scala 95:28]
    wire crc_out : UInt<32>
    crc_out <= UInt<32>("h00")
    reg crc_out_r : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[EthFcsPadding.scala 97:28]
    reg tx_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EthFcsPadding.scala 98:28]
    reg tx_dat : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[EthFcsPadding.scala 99:28]
    reg _T : UInt<1>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T <= io.rx_en @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_1 : UInt<1>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T_1 <= _T @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_2 : UInt<1>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T_2 <= _T_1 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_3 : UInt<1>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T_3 <= _T_2 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg rx_valid_r5 : UInt<1>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      rx_valid_r5 <= _T_3 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_4 : UInt<8>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T_4 <= io.rx_dat @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_5 : UInt<8>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T_5 <= _T_4 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_6 : UInt<8>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T_6 <= _T_5 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg _T_7 : UInt<8>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      _T_7 <= _T_6 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg rx_data_r5 : UInt<8>, clock @[Reg.scala 15:16]
    when UInt<1>("h01") : @[Reg.scala 16:19]
      rx_data_r5 <= _T_7 @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_8 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_8 : @[Conditional.scala 40:58]
      counter <= UInt<1>("h00") @[EthFcsPadding.scala 106:15]
      crc_enable <= UInt<1>("h00") @[EthFcsPadding.scala 107:18]
      reg _T_9 : UInt<1>, clock @[util.scala 13:42]
      _T_9 <= rx_valid_r5 @[util.scala 13:42]
      node _T_10 = eq(_T_9, UInt<1>("h00")) @[util.scala 13:34]
      node _T_11 = and(rx_valid_r5, _T_10) @[util.scala 13:31]
      when _T_11 : @[EthFcsPadding.scala 108:38]
        node _T_12 = eq(rx_data_r5, UInt<7>("h055")) @[EthFcsPadding.scala 109:26]
        when _T_12 : @[EthFcsPadding.scala 109:38]
          state <= UInt<3>("h01") @[EthFcsPadding.scala 110:17]
          tx_en <= UInt<1>("h01") @[EthFcsPadding.scala 111:17]
          tx_dat <= rx_data_r5 @[EthFcsPadding.scala 112:18]
          skip @[EthFcsPadding.scala 109:38]
        skip @[EthFcsPadding.scala 108:38]
      else : @[EthFcsPadding.scala 114:20]
        tx_en <= UInt<1>("h00") @[EthFcsPadding.scala 115:15]
        tx_dat <= UInt<1>("h00") @[EthFcsPadding.scala 116:16]
        skip @[EthFcsPadding.scala 114:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_13 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_13 : @[Conditional.scala 39:67]
        tx_dat <= rx_data_r5 @[EthFcsPadding.scala 120:14]
        node _T_14 = add(counter, UInt<1>("h01")) @[EthFcsPadding.scala 121:26]
        node _T_15 = tail(_T_14, 1) @[EthFcsPadding.scala 121:26]
        counter <= _T_15 @[EthFcsPadding.scala 121:15]
        node _T_16 = eq(counter, UInt<3>("h07")) @[EthFcsPadding.scala 122:21]
        when _T_16 : @[EthFcsPadding.scala 122:36]
          state <= UInt<3>("h00") @[EthFcsPadding.scala 124:15]
          skip @[EthFcsPadding.scala 122:36]
        else : @[EthFcsPadding.scala 125:43]
          node _T_17 = eq(rx_data_r5, UInt<8>("h0d5")) @[EthFcsPadding.scala 125:31]
          when _T_17 : @[EthFcsPadding.scala 125:43]
            state <= UInt<3>("h02") @[EthFcsPadding.scala 126:15]
            counter <= UInt<1>("h00") @[EthFcsPadding.scala 127:17]
            crc_enable <= UInt<1>("h01") @[EthFcsPadding.scala 128:20]
            skip @[EthFcsPadding.scala 125:43]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_18 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_18 : @[Conditional.scala 39:67]
          tx_dat <= rx_data_r5 @[EthFcsPadding.scala 132:14]
          node _T_19 = eq(io.rx_en, UInt<1>("h00")) @[EthFcsPadding.scala 133:13]
          when _T_19 : @[EthFcsPadding.scala 133:24]
            state <= UInt<3>("h03") @[EthFcsPadding.scala 134:15]
            counter <= UInt<1>("h00") @[EthFcsPadding.scala 135:17]
            crc_enable <= UInt<1>("h00") @[EthFcsPadding.scala 136:20]
            skip @[EthFcsPadding.scala 133:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_20 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_20 : @[Conditional.scala 39:67]
            state <= UInt<3>("h04") @[EthFcsPadding.scala 140:13]
            node _T_21 = shr(crc_out, 8) @[EthFcsPadding.scala 141:28]
            crc_out_r <= _T_21 @[EthFcsPadding.scala 141:17]
            node _T_22 = bits(crc_out, 7, 0) @[EthFcsPadding.scala 142:24]
            tx_dat <= _T_22 @[EthFcsPadding.scala 142:14]
            node _T_23 = add(counter, UInt<1>("h01")) @[EthFcsPadding.scala 143:26]
            node _T_24 = tail(_T_23, 1) @[EthFcsPadding.scala 143:26]
            counter <= _T_24 @[EthFcsPadding.scala 143:15]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_25 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_25 : @[Conditional.scala 39:67]
              node _T_26 = shr(crc_out_r, 8) @[EthFcsPadding.scala 146:30]
              crc_out_r <= _T_26 @[EthFcsPadding.scala 146:17]
              node _T_27 = add(counter, UInt<1>("h01")) @[EthFcsPadding.scala 147:26]
              node _T_28 = tail(_T_27, 1) @[EthFcsPadding.scala 147:26]
              counter <= _T_28 @[EthFcsPadding.scala 147:15]
              node _T_29 = eq(counter, UInt<3>("h04")) @[EthFcsPadding.scala 148:21]
              when _T_29 : @[EthFcsPadding.scala 148:30]
                state <= UInt<3>("h00") @[EthFcsPadding.scala 149:15]
                tx_en <= UInt<1>("h00") @[EthFcsPadding.scala 150:15]
                tx_dat <= UInt<1>("h00") @[EthFcsPadding.scala 151:16]
                skip @[EthFcsPadding.scala 148:30]
              else : @[EthFcsPadding.scala 152:20]
                node _T_30 = bits(crc_out_r, 7, 0) @[EthFcsPadding.scala 153:28]
                tx_dat <= _T_30 @[EthFcsPadding.scala 153:16]
                skip @[EthFcsPadding.scala 152:20]
              skip @[Conditional.scala 39:67]
    crc32_d8.io.data <= rx_data_r5 @[EthFcsPadding.scala 158:22]
    crc32_d8.io.enable <= crc_enable @[EthFcsPadding.scala 159:22]
    crc32_d8.io.start <= crc_enable @[EthFcsPadding.scala 160:22]
    crc_out <= crc32_d8.io.crc @[EthFcsPadding.scala 161:22]
    io.tx_en <= tx_en @[EthFcsPadding.scala 163:13]
    io.tx_dat <= tx_dat @[EthFcsPadding.scala 164:13]
    
  module MaxPeriodFibonacciLFSR : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}
    
    wire _T : UInt<1>[16] @[PRNG.scala 38:28]
    _T[0] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[15] <= UInt<1>("h01") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _T)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      node _T_1 = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[12]) @[LFSR.scala 15:41]
      node _T_3 = xor(_T_2, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_3 @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      state[10] <= state[9] @[PRNG.scala 62:11]
      state[11] <= state[10] @[PRNG.scala 62:11]
      state[12] <= state[11] @[PRNG.scala 62:11]
      state[13] <= state[12] @[PRNG.scala 62:11]
      state[14] <= state[13] @[PRNG.scala 62:11]
      state[15] <= state[14] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
    
  module MaxPeriodFibonacciLFSR_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}
    
    wire _T : UInt<1>[16] @[PRNG.scala 38:28]
    _T[0] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[15] <= UInt<1>("h01") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _T)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      node _T_1 = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[12]) @[LFSR.scala 15:41]
      node _T_3 = xor(_T_2, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_3 @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      state[10] <= state[9] @[PRNG.scala 62:11]
      state[11] <= state[10] @[PRNG.scala 62:11]
      state[12] <= state[11] @[PRNG.scala 62:11]
      state[13] <= state[12] @[PRNG.scala 62:11]
      state[14] <= state[13] @[PRNG.scala 62:11]
      state[15] <= state[14] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
    
  module MaxPeriodFibonacciLFSR_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip seed : {valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}
    
    wire _T : UInt<1>[16] @[PRNG.scala 38:28]
    _T[0] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[1] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[2] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[3] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[4] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[5] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[6] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[7] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[8] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[9] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[10] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[11] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[12] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[13] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[14] <= UInt<1>("h00") @[PRNG.scala 38:28]
    _T[15] <= UInt<1>("h01") @[PRNG.scala 38:28]
    reg state : UInt<1>[16], clock with : (reset => (reset, _T)) @[PRNG.scala 47:50]
    when io.increment : @[PRNG.scala 61:23]
      node _T_1 = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[12]) @[LFSR.scala 15:41]
      node _T_3 = xor(_T_2, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_3 @[PRNG.scala 62:11]
      state[1] <= state[0] @[PRNG.scala 62:11]
      state[2] <= state[1] @[PRNG.scala 62:11]
      state[3] <= state[2] @[PRNG.scala 62:11]
      state[4] <= state[3] @[PRNG.scala 62:11]
      state[5] <= state[4] @[PRNG.scala 62:11]
      state[6] <= state[5] @[PRNG.scala 62:11]
      state[7] <= state[6] @[PRNG.scala 62:11]
      state[8] <= state[7] @[PRNG.scala 62:11]
      state[9] <= state[8] @[PRNG.scala 62:11]
      state[10] <= state[9] @[PRNG.scala 62:11]
      state[11] <= state[10] @[PRNG.scala 62:11]
      state[12] <= state[11] @[PRNG.scala 62:11]
      state[13] <= state[12] @[PRNG.scala 62:11]
      state[14] <= state[13] @[PRNG.scala 62:11]
      state[15] <= state[14] @[PRNG.scala 62:11]
      skip @[PRNG.scala 61:23]
    when io.seed.valid : @[PRNG.scala 65:25]
      state[0] <= io.seed.bits[0] @[PRNG.scala 66:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 66:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 66:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 66:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 66:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 66:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 66:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 66:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 66:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 66:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 66:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 66:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 66:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 66:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 66:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 66:11]
      skip @[PRNG.scala 65:25]
    io.out[0] <= state[0] @[PRNG.scala 69:10]
    io.out[1] <= state[1] @[PRNG.scala 69:10]
    io.out[2] <= state[2] @[PRNG.scala 69:10]
    io.out[3] <= state[3] @[PRNG.scala 69:10]
    io.out[4] <= state[4] @[PRNG.scala 69:10]
    io.out[5] <= state[5] @[PRNG.scala 69:10]
    io.out[6] <= state[6] @[PRNG.scala 69:10]
    io.out[7] <= state[7] @[PRNG.scala 69:10]
    io.out[8] <= state[8] @[PRNG.scala 69:10]
    io.out[9] <= state[9] @[PRNG.scala 69:10]
    io.out[10] <= state[10] @[PRNG.scala 69:10]
    io.out[11] <= state[11] @[PRNG.scala 69:10]
    io.out[12] <= state[12] @[PRNG.scala 69:10]
    io.out[13] <= state[13] @[PRNG.scala 69:10]
    io.out[14] <= state[14] @[PRNG.scala 69:10]
    io.out[15] <= state[15] @[PRNG.scala 69:10]
    
  module PktGen8bit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enable : UInt<1>, flip suspend : UInt<1>, flip send_mode : UInt<1>, flip send_count : UInt<32>, send_done : UInt<1>, flip pkt_len_mode : UInt<1>, flip pkt_len_init : UInt<16>, flip inter_frame_gap : UInt<16>, flip payload_mode : UInt<2>, flip da : UInt<48>, flip sa : UInt<48>, flip etype : UInt<16>, tx_en : UInt<1>, tx_data : UInt<8>, flip total_send_count_clr : UInt<1>, total_send_count : UInt<48>}
    
    io.total_send_count is invalid @[PktGen.scala 46:6]
    io.total_send_count_clr is invalid @[PktGen.scala 46:6]
    io.tx_data is invalid @[PktGen.scala 46:6]
    io.tx_en is invalid @[PktGen.scala 46:6]
    io.etype is invalid @[PktGen.scala 46:6]
    io.sa is invalid @[PktGen.scala 46:6]
    io.da is invalid @[PktGen.scala 46:6]
    io.payload_mode is invalid @[PktGen.scala 46:6]
    io.inter_frame_gap is invalid @[PktGen.scala 46:6]
    io.pkt_len_init is invalid @[PktGen.scala 46:6]
    io.pkt_len_mode is invalid @[PktGen.scala 46:6]
    io.send_done is invalid @[PktGen.scala 46:6]
    io.send_count is invalid @[PktGen.scala 46:6]
    io.send_mode is invalid @[PktGen.scala 46:6]
    io.suspend is invalid @[PktGen.scala 46:6]
    io.enable is invalid @[PktGen.scala 46:6]
    reg state : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[PktGen.scala 49:22]
    inst eth_fcs_padding of EthFcsPadding @[PktGen.scala 50:32]
    eth_fcs_padding.clock <= clock
    eth_fcs_padding.reset <= reset
    reg tx_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[PktGen.scala 52:39]
    reg tx_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[PktGen.scala 53:39]
    reg cntr : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[PktGen.scala 55:39]
    reg pkt_len : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[PktGen.scala 56:39]
    reg total_send_count : UInt<48>, clock with : (reset => (reset, UInt<48>("h00"))) @[PktGen.scala 57:39]
    reg send_count : UInt<48>, clock with : (reset => (reset, UInt<48>("h00"))) @[PktGen.scala 58:39]
    reg send_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[PktGen.scala 59:39]
    reg loaded_pkt_len : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[PktGen.scala 61:39]
    reg _T : UInt<1>, clock @[util.scala 13:42]
    _T <= io.enable @[util.scala 13:42]
    node _T_1 = eq(_T, UInt<1>("h00")) @[util.scala 13:34]
    node _T_2 = and(io.enable, _T_1) @[util.scala 13:31]
    when _T_2 : @[PktGen.scala 64:32]
      send_count <= UInt<1>("h00") @[PktGen.scala 65:16]
      skip @[PktGen.scala 64:32]
    else : @[PktGen.scala 66:39]
      node _T_3 = eq(io.tx_en, UInt<1>("h00")) @[util.scala 14:30]
      reg _T_4 : UInt<1>, clock @[util.scala 14:43]
      _T_4 <= io.tx_en @[util.scala 14:43]
      node _T_5 = and(_T_3, _T_4) @[util.scala 14:33]
      when _T_5 : @[PktGen.scala 66:39]
        node _T_6 = add(send_count, UInt<1>("h01")) @[PktGen.scala 67:30]
        node _T_7 = tail(_T_6, 1) @[PktGen.scala 67:30]
        send_count <= _T_7 @[PktGen.scala 67:16]
        skip @[PktGen.scala 66:39]
    reg _T_8 : UInt<1>, clock @[util.scala 13:42]
    _T_8 <= io.enable @[util.scala 13:42]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[util.scala 13:34]
    node _T_10 = and(io.enable, _T_9) @[util.scala 13:31]
    when _T_10 : @[PktGen.scala 70:32]
      send_done <= UInt<1>("h00") @[PktGen.scala 71:15]
      skip @[PktGen.scala 70:32]
    else : @[PktGen.scala 72:16]
      node _T_11 = eq(io.send_mode, UInt<1>("h00")) @[PktGen.scala 73:24]
      when _T_11 : @[PktGen.scala 73:33]
        node _T_12 = eq(send_count, io.send_count) @[PktGen.scala 74:31]
        send_done <= _T_12 @[PktGen.scala 74:17]
        skip @[PktGen.scala 73:33]
      skip @[PktGen.scala 72:16]
    when io.total_send_count_clr : @[PktGen.scala 78:34]
      total_send_count <= UInt<1>("h00") @[PktGen.scala 79:22]
      skip @[PktGen.scala 78:34]
    else : @[PktGen.scala 80:39]
      node _T_13 = eq(io.tx_en, UInt<1>("h00")) @[util.scala 14:30]
      reg _T_14 : UInt<1>, clock @[util.scala 14:43]
      _T_14 <= io.tx_en @[util.scala 14:43]
      node _T_15 = and(_T_13, _T_14) @[util.scala 14:33]
      when _T_15 : @[PktGen.scala 80:39]
        node _T_16 = add(total_send_count, UInt<1>("h01")) @[PktGen.scala 81:42]
        node _T_17 = tail(_T_16, 1) @[PktGen.scala 81:42]
        total_send_count <= _T_17 @[PktGen.scala 81:22]
        skip @[PktGen.scala 80:39]
    reg _T_18 : UInt<1>, clock @[util.scala 13:42]
    _T_18 <= io.enable @[util.scala 13:42]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[util.scala 13:34]
    node _T_20 = and(io.enable, _T_19) @[util.scala 13:31]
    when _T_20 : @[PktGen.scala 86:32]
      loaded_pkt_len <= io.pkt_len_init @[PktGen.scala 87:28]
      skip @[PktGen.scala 86:32]
    reg load_r : UInt<48>, clock with : (reset => (reset, UInt<48>("h00"))) @[PktGen.scala 90:23]
    node _T_21 = eq(UInt<4>("h00"), state) @[Conditional.scala 37:30]
    when _T_21 : @[Conditional.scala 40:58]
      cntr <= UInt<1>("h00") @[PktGen.scala 94:12]
      node _T_22 = eq(io.suspend, UInt<1>("h00")) @[PktGen.scala 95:13]
      reg _T_23 : UInt<1>, clock @[PktGen.scala 95:35]
      _T_23 <= io.enable @[PktGen.scala 95:35]
      node _T_24 = and(_T_22, _T_23) @[PktGen.scala 95:25]
      node _T_25 = eq(send_done, UInt<1>("h00")) @[PktGen.scala 95:50]
      node _T_26 = and(_T_24, _T_25) @[PktGen.scala 95:47]
      when _T_26 : @[PktGen.scala 95:62]
        state <= UInt<4>("h02") @[PktGen.scala 96:15]
        tx_en <= UInt<1>("h01") @[PktGen.scala 97:15]
        tx_data <= UInt<7>("h055") @[PktGen.scala 98:17]
        node _T_27 = eq(io.pkt_len_mode, UInt<1>("h00")) @[PktGen.scala 99:31]
        when _T_27 : @[PktGen.scala 99:40]
          pkt_len <= loaded_pkt_len @[PktGen.scala 101:19]
          skip @[PktGen.scala 99:40]
        else : @[PktGen.scala 102:47]
          node _T_28 = eq(io.pkt_len_mode, UInt<1>("h01")) @[PktGen.scala 102:38]
          when _T_28 : @[PktGen.scala 102:47]
            inst MaxPeriodFibonacciLFSR of MaxPeriodFibonacciLFSR @[PRNG.scala 82:22]
            MaxPeriodFibonacciLFSR.clock <= clock
            MaxPeriodFibonacciLFSR.reset <= reset
            MaxPeriodFibonacciLFSR.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
            MaxPeriodFibonacciLFSR.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
            MaxPeriodFibonacciLFSR.io.increment <= UInt<1>("h01") @[PRNG.scala 85:23]
            node _T_29 = cat(MaxPeriodFibonacciLFSR.io.out[1], MaxPeriodFibonacciLFSR.io.out[0]) @[PRNG.scala 86:17]
            node _T_30 = cat(MaxPeriodFibonacciLFSR.io.out[3], MaxPeriodFibonacciLFSR.io.out[2]) @[PRNG.scala 86:17]
            node _T_31 = cat(_T_30, _T_29) @[PRNG.scala 86:17]
            node _T_32 = cat(MaxPeriodFibonacciLFSR.io.out[5], MaxPeriodFibonacciLFSR.io.out[4]) @[PRNG.scala 86:17]
            node _T_33 = cat(MaxPeriodFibonacciLFSR.io.out[7], MaxPeriodFibonacciLFSR.io.out[6]) @[PRNG.scala 86:17]
            node _T_34 = cat(_T_33, _T_32) @[PRNG.scala 86:17]
            node _T_35 = cat(_T_34, _T_31) @[PRNG.scala 86:17]
            node _T_36 = cat(MaxPeriodFibonacciLFSR.io.out[9], MaxPeriodFibonacciLFSR.io.out[8]) @[PRNG.scala 86:17]
            node _T_37 = cat(MaxPeriodFibonacciLFSR.io.out[11], MaxPeriodFibonacciLFSR.io.out[10]) @[PRNG.scala 86:17]
            node _T_38 = cat(_T_37, _T_36) @[PRNG.scala 86:17]
            node _T_39 = cat(MaxPeriodFibonacciLFSR.io.out[13], MaxPeriodFibonacciLFSR.io.out[12]) @[PRNG.scala 86:17]
            node _T_40 = cat(MaxPeriodFibonacciLFSR.io.out[15], MaxPeriodFibonacciLFSR.io.out[14]) @[PRNG.scala 86:17]
            node _T_41 = cat(_T_40, _T_39) @[PRNG.scala 86:17]
            node _T_42 = cat(_T_41, _T_38) @[PRNG.scala 86:17]
            node _T_43 = cat(_T_42, _T_35) @[PRNG.scala 86:17]
            node _T_44 = bits(_T_43, 0, 0) @[LFSR.scala 41:16]
            node _T_45 = bits(_T_43, 1, 1) @[LFSR.scala 41:16]
            node _T_46 = bits(_T_43, 2, 2) @[LFSR.scala 41:16]
            node _T_47 = bits(_T_43, 3, 3) @[LFSR.scala 41:16]
            node _T_48 = bits(_T_43, 4, 4) @[LFSR.scala 41:16]
            node _T_49 = bits(_T_43, 5, 5) @[LFSR.scala 41:16]
            node _T_50 = bits(_T_43, 6, 6) @[LFSR.scala 41:16]
            node _T_51 = bits(_T_43, 7, 7) @[LFSR.scala 41:16]
            node _T_52 = bits(_T_43, 8, 8) @[LFSR.scala 41:16]
            node _T_53 = bits(_T_43, 9, 9) @[LFSR.scala 41:16]
            node _T_54 = bits(_T_43, 10, 10) @[LFSR.scala 41:16]
            node _T_55 = bits(_T_43, 11, 11) @[LFSR.scala 41:16]
            node _T_56 = bits(_T_43, 12, 12) @[LFSR.scala 41:16]
            node _T_57 = bits(_T_43, 13, 13) @[LFSR.scala 41:16]
            node _T_58 = bits(_T_43, 14, 14) @[LFSR.scala 41:16]
            node _T_59 = bits(_T_43, 15, 15) @[LFSR.scala 41:16]
            wire _T_60 : UInt<1>[16] @[LFSR.scala 39:12]
            _T_60[0] <= _T_59 @[LFSR.scala 39:12]
            _T_60[1] <= _T_58 @[LFSR.scala 39:12]
            _T_60[2] <= _T_57 @[LFSR.scala 39:12]
            _T_60[3] <= _T_56 @[LFSR.scala 39:12]
            _T_60[4] <= _T_55 @[LFSR.scala 39:12]
            _T_60[5] <= _T_54 @[LFSR.scala 39:12]
            _T_60[6] <= _T_53 @[LFSR.scala 39:12]
            _T_60[7] <= _T_52 @[LFSR.scala 39:12]
            _T_60[8] <= _T_51 @[LFSR.scala 39:12]
            _T_60[9] <= _T_50 @[LFSR.scala 39:12]
            _T_60[10] <= _T_49 @[LFSR.scala 39:12]
            _T_60[11] <= _T_48 @[LFSR.scala 39:12]
            _T_60[12] <= _T_47 @[LFSR.scala 39:12]
            _T_60[13] <= _T_46 @[LFSR.scala 39:12]
            _T_60[14] <= _T_45 @[LFSR.scala 39:12]
            _T_60[15] <= _T_44 @[LFSR.scala 39:12]
            node _T_61 = cat(_T_60[1], _T_60[0]) @[LFSR.scala 43:8]
            node _T_62 = cat(_T_60[3], _T_60[2]) @[LFSR.scala 43:8]
            node _T_63 = cat(_T_62, _T_61) @[LFSR.scala 43:8]
            node _T_64 = cat(_T_60[5], _T_60[4]) @[LFSR.scala 43:8]
            node _T_65 = cat(_T_60[7], _T_60[6]) @[LFSR.scala 43:8]
            node _T_66 = cat(_T_65, _T_64) @[LFSR.scala 43:8]
            node _T_67 = cat(_T_66, _T_63) @[LFSR.scala 43:8]
            node _T_68 = cat(_T_60[9], _T_60[8]) @[LFSR.scala 43:8]
            node _T_69 = cat(_T_60[11], _T_60[10]) @[LFSR.scala 43:8]
            node _T_70 = cat(_T_69, _T_68) @[LFSR.scala 43:8]
            node _T_71 = cat(_T_60[13], _T_60[12]) @[LFSR.scala 43:8]
            node _T_72 = cat(_T_60[15], _T_60[14]) @[LFSR.scala 43:8]
            node _T_73 = cat(_T_72, _T_71) @[LFSR.scala 43:8]
            node _T_74 = cat(_T_73, _T_70) @[LFSR.scala 43:8]
            node _T_75 = cat(_T_74, _T_67) @[LFSR.scala 43:8]
            node _T_76 = sub(UInt<7>("h040"), UInt<11>("h05ee")) @[PktGen.scala 104:41]
            node _T_77 = tail(_T_76, 1) @[PktGen.scala 104:41]
            node _T_78 = add(_T_77, UInt<1>("h01")) @[PktGen.scala 104:51]
            node _T_79 = tail(_T_78, 1) @[PktGen.scala 104:51]
            node _T_80 = rem(_T_75, _T_79) @[PktGen.scala 104:32]
            node _T_81 = add(_T_80, UInt<7>("h040")) @[PktGen.scala 104:59]
            node _T_82 = tail(_T_81, 1) @[PktGen.scala 104:59]
            pkt_len <= _T_82 @[PktGen.scala 104:19]
            skip @[PktGen.scala 102:47]
        skip @[PktGen.scala 95:62]
      else : @[PktGen.scala 106:20]
        tx_en <= UInt<1>("h00") @[PktGen.scala 107:15]
        tx_data <= UInt<1>("h00") @[PktGen.scala 108:17]
        skip @[PktGen.scala 106:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_83 = eq(UInt<4>("h02"), state) @[Conditional.scala 37:30]
      when _T_83 : @[Conditional.scala 39:67]
        node _T_84 = eq(cntr, UInt<3>("h06")) @[PktGen.scala 112:18]
        when _T_84 : @[PktGen.scala 112:33]
          state <= UInt<4>("h03") @[PktGen.scala 113:15]
          tx_data <= UInt<8>("h0d5") @[PktGen.scala 114:17]
          skip @[PktGen.scala 112:33]
        else : @[PktGen.scala 115:20]
          node _T_85 = add(cntr, UInt<1>("h01")) @[PktGen.scala 116:22]
          node _T_86 = tail(_T_85, 1) @[PktGen.scala 116:22]
          cntr <= _T_86 @[PktGen.scala 116:14]
          skip @[PktGen.scala 115:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_87 = eq(UInt<4>("h03"), state) @[Conditional.scala 37:30]
        when _T_87 : @[Conditional.scala 39:67]
          state <= UInt<4>("h05") @[PktGen.scala 120:13]
          cntr <= UInt<1>("h00") @[PktGen.scala 121:12]
          node _T_88 = bits(io.da, 47, 40) @[PktGen.scala 122:23]
          tx_data <= _T_88 @[PktGen.scala 122:15]
          node _T_89 = shl(io.da, 8) @[PktGen.scala 123:23]
          load_r <= _T_89 @[PktGen.scala 123:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_90 = eq(UInt<4>("h05"), state) @[Conditional.scala 37:30]
          when _T_90 : @[Conditional.scala 39:67]
            node _T_91 = eq(cntr, UInt<3>("h05")) @[PktGen.scala 126:18]
            when _T_91 : @[PktGen.scala 126:33]
              state <= UInt<4>("h06") @[PktGen.scala 127:15]
              node _T_92 = bits(io.sa, 47, 40) @[PktGen.scala 128:25]
              tx_data <= _T_92 @[PktGen.scala 128:17]
              node _T_93 = shl(io.sa, 8) @[PktGen.scala 129:25]
              load_r <= _T_93 @[PktGen.scala 129:16]
              cntr <= UInt<1>("h00") @[PktGen.scala 130:14]
              skip @[PktGen.scala 126:33]
            else : @[PktGen.scala 131:20]
              node _T_94 = bits(load_r, 47, 40) @[PktGen.scala 132:26]
              tx_data <= _T_94 @[PktGen.scala 132:17]
              node _T_95 = shl(load_r, 8) @[PktGen.scala 133:26]
              load_r <= _T_95 @[PktGen.scala 133:16]
              node _T_96 = add(cntr, UInt<1>("h01")) @[PktGen.scala 134:22]
              node _T_97 = tail(_T_96, 1) @[PktGen.scala 134:22]
              cntr <= _T_97 @[PktGen.scala 134:14]
              skip @[PktGen.scala 131:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_98 = eq(UInt<4>("h06"), state) @[Conditional.scala 37:30]
            when _T_98 : @[Conditional.scala 39:67]
              node _T_99 = eq(cntr, UInt<3>("h05")) @[PktGen.scala 138:18]
              when _T_99 : @[PktGen.scala 138:33]
                state <= UInt<4>("h04") @[PktGen.scala 139:15]
                node _T_100 = bits(io.etype, 15, 8) @[PktGen.scala 140:28]
                tx_data <= _T_100 @[PktGen.scala 140:17]
                cntr <= UInt<1>("h00") @[PktGen.scala 141:14]
                skip @[PktGen.scala 138:33]
              else : @[PktGen.scala 142:20]
                node _T_101 = bits(load_r, 47, 40) @[PktGen.scala 143:26]
                tx_data <= _T_101 @[PktGen.scala 143:17]
                node _T_102 = shl(load_r, 8) @[PktGen.scala 144:26]
                load_r <= _T_102 @[PktGen.scala 144:16]
                node _T_103 = add(cntr, UInt<1>("h01")) @[PktGen.scala 145:22]
                node _T_104 = tail(_T_103, 1) @[PktGen.scala 145:22]
                cntr <= _T_104 @[PktGen.scala 145:14]
                skip @[PktGen.scala 142:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_105 = eq(UInt<4>("h04"), state) @[Conditional.scala 37:30]
              when _T_105 : @[Conditional.scala 39:67]
                node _T_106 = eq(cntr, UInt<1>("h01")) @[PktGen.scala 149:18]
                when _T_106 : @[PktGen.scala 149:33]
                  state <= UInt<4>("h07") @[PktGen.scala 150:15]
                  node _T_107 = eq(io.payload_mode, UInt<1>("h00")) @[PktGen.scala 151:31]
                  when _T_107 : @[PktGen.scala 151:40]
                    tx_data <= UInt<7>("h05a") @[PktGen.scala 152:19]
                    skip @[PktGen.scala 151:40]
                  else : @[PktGen.scala 153:47]
                    node _T_108 = eq(io.payload_mode, UInt<1>("h01")) @[PktGen.scala 153:38]
                    when _T_108 : @[PktGen.scala 153:47]
                      tx_data <= UInt<1>("h00") @[PktGen.scala 154:19]
                      skip @[PktGen.scala 153:47]
                    else : @[PktGen.scala 155:47]
                      node _T_109 = eq(io.payload_mode, UInt<2>("h02")) @[PktGen.scala 155:38]
                      when _T_109 : @[PktGen.scala 155:47]
                        inst MaxPeriodFibonacciLFSR_1 of MaxPeriodFibonacciLFSR_1 @[PRNG.scala 82:22]
                        MaxPeriodFibonacciLFSR_1.clock <= clock
                        MaxPeriodFibonacciLFSR_1.reset <= reset
                        MaxPeriodFibonacciLFSR_1.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
                        MaxPeriodFibonacciLFSR_1.io.increment <= UInt<1>("h01") @[PRNG.scala 85:23]
                        node _T_110 = cat(MaxPeriodFibonacciLFSR_1.io.out[1], MaxPeriodFibonacciLFSR_1.io.out[0]) @[PRNG.scala 86:17]
                        node _T_111 = cat(MaxPeriodFibonacciLFSR_1.io.out[3], MaxPeriodFibonacciLFSR_1.io.out[2]) @[PRNG.scala 86:17]
                        node _T_112 = cat(_T_111, _T_110) @[PRNG.scala 86:17]
                        node _T_113 = cat(MaxPeriodFibonacciLFSR_1.io.out[5], MaxPeriodFibonacciLFSR_1.io.out[4]) @[PRNG.scala 86:17]
                        node _T_114 = cat(MaxPeriodFibonacciLFSR_1.io.out[7], MaxPeriodFibonacciLFSR_1.io.out[6]) @[PRNG.scala 86:17]
                        node _T_115 = cat(_T_114, _T_113) @[PRNG.scala 86:17]
                        node _T_116 = cat(_T_115, _T_112) @[PRNG.scala 86:17]
                        node _T_117 = cat(MaxPeriodFibonacciLFSR_1.io.out[9], MaxPeriodFibonacciLFSR_1.io.out[8]) @[PRNG.scala 86:17]
                        node _T_118 = cat(MaxPeriodFibonacciLFSR_1.io.out[11], MaxPeriodFibonacciLFSR_1.io.out[10]) @[PRNG.scala 86:17]
                        node _T_119 = cat(_T_118, _T_117) @[PRNG.scala 86:17]
                        node _T_120 = cat(MaxPeriodFibonacciLFSR_1.io.out[13], MaxPeriodFibonacciLFSR_1.io.out[12]) @[PRNG.scala 86:17]
                        node _T_121 = cat(MaxPeriodFibonacciLFSR_1.io.out[15], MaxPeriodFibonacciLFSR_1.io.out[14]) @[PRNG.scala 86:17]
                        node _T_122 = cat(_T_121, _T_120) @[PRNG.scala 86:17]
                        node _T_123 = cat(_T_122, _T_119) @[PRNG.scala 86:17]
                        node _T_124 = cat(_T_123, _T_116) @[PRNG.scala 86:17]
                        node _T_125 = bits(_T_124, 0, 0) @[LFSR.scala 41:16]
                        node _T_126 = bits(_T_124, 1, 1) @[LFSR.scala 41:16]
                        node _T_127 = bits(_T_124, 2, 2) @[LFSR.scala 41:16]
                        node _T_128 = bits(_T_124, 3, 3) @[LFSR.scala 41:16]
                        node _T_129 = bits(_T_124, 4, 4) @[LFSR.scala 41:16]
                        node _T_130 = bits(_T_124, 5, 5) @[LFSR.scala 41:16]
                        node _T_131 = bits(_T_124, 6, 6) @[LFSR.scala 41:16]
                        node _T_132 = bits(_T_124, 7, 7) @[LFSR.scala 41:16]
                        node _T_133 = bits(_T_124, 8, 8) @[LFSR.scala 41:16]
                        node _T_134 = bits(_T_124, 9, 9) @[LFSR.scala 41:16]
                        node _T_135 = bits(_T_124, 10, 10) @[LFSR.scala 41:16]
                        node _T_136 = bits(_T_124, 11, 11) @[LFSR.scala 41:16]
                        node _T_137 = bits(_T_124, 12, 12) @[LFSR.scala 41:16]
                        node _T_138 = bits(_T_124, 13, 13) @[LFSR.scala 41:16]
                        node _T_139 = bits(_T_124, 14, 14) @[LFSR.scala 41:16]
                        node _T_140 = bits(_T_124, 15, 15) @[LFSR.scala 41:16]
                        wire _T_141 : UInt<1>[16] @[LFSR.scala 39:12]
                        _T_141[0] <= _T_140 @[LFSR.scala 39:12]
                        _T_141[1] <= _T_139 @[LFSR.scala 39:12]
                        _T_141[2] <= _T_138 @[LFSR.scala 39:12]
                        _T_141[3] <= _T_137 @[LFSR.scala 39:12]
                        _T_141[4] <= _T_136 @[LFSR.scala 39:12]
                        _T_141[5] <= _T_135 @[LFSR.scala 39:12]
                        _T_141[6] <= _T_134 @[LFSR.scala 39:12]
                        _T_141[7] <= _T_133 @[LFSR.scala 39:12]
                        _T_141[8] <= _T_132 @[LFSR.scala 39:12]
                        _T_141[9] <= _T_131 @[LFSR.scala 39:12]
                        _T_141[10] <= _T_130 @[LFSR.scala 39:12]
                        _T_141[11] <= _T_129 @[LFSR.scala 39:12]
                        _T_141[12] <= _T_128 @[LFSR.scala 39:12]
                        _T_141[13] <= _T_127 @[LFSR.scala 39:12]
                        _T_141[14] <= _T_126 @[LFSR.scala 39:12]
                        _T_141[15] <= _T_125 @[LFSR.scala 39:12]
                        node _T_142 = cat(_T_141[1], _T_141[0]) @[LFSR.scala 43:8]
                        node _T_143 = cat(_T_141[3], _T_141[2]) @[LFSR.scala 43:8]
                        node _T_144 = cat(_T_143, _T_142) @[LFSR.scala 43:8]
                        node _T_145 = cat(_T_141[5], _T_141[4]) @[LFSR.scala 43:8]
                        node _T_146 = cat(_T_141[7], _T_141[6]) @[LFSR.scala 43:8]
                        node _T_147 = cat(_T_146, _T_145) @[LFSR.scala 43:8]
                        node _T_148 = cat(_T_147, _T_144) @[LFSR.scala 43:8]
                        node _T_149 = cat(_T_141[9], _T_141[8]) @[LFSR.scala 43:8]
                        node _T_150 = cat(_T_141[11], _T_141[10]) @[LFSR.scala 43:8]
                        node _T_151 = cat(_T_150, _T_149) @[LFSR.scala 43:8]
                        node _T_152 = cat(_T_141[13], _T_141[12]) @[LFSR.scala 43:8]
                        node _T_153 = cat(_T_141[15], _T_141[14]) @[LFSR.scala 43:8]
                        node _T_154 = cat(_T_153, _T_152) @[LFSR.scala 43:8]
                        node _T_155 = cat(_T_154, _T_151) @[LFSR.scala 43:8]
                        node _T_156 = cat(_T_155, _T_148) @[LFSR.scala 43:8]
                        tx_data <= _T_156 @[PktGen.scala 156:19]
                        skip @[PktGen.scala 155:47]
                      else : @[PktGen.scala 157:47]
                        node _T_157 = eq(io.payload_mode, UInt<2>("h03")) @[PktGen.scala 157:38]
                        when _T_157 : @[PktGen.scala 157:47]
                          tx_data <= UInt<1>("h00") @[PktGen.scala 158:19]
                          skip @[PktGen.scala 157:47]
                  cntr <= UInt<1>("h00") @[PktGen.scala 160:14]
                  skip @[PktGen.scala 149:33]
                else : @[PktGen.scala 161:20]
                  node _T_158 = bits(io.etype, 7, 0) @[PktGen.scala 162:28]
                  tx_data <= _T_158 @[PktGen.scala 162:17]
                  node _T_159 = add(cntr, UInt<1>("h01")) @[PktGen.scala 163:22]
                  node _T_160 = tail(_T_159, 1) @[PktGen.scala 163:22]
                  cntr <= _T_160 @[PktGen.scala 163:14]
                  skip @[PktGen.scala 161:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_161 = eq(UInt<4>("h07"), state) @[Conditional.scala 37:30]
                when _T_161 : @[Conditional.scala 39:67]
                  node _T_162 = sub(pkt_len, UInt<4>("h0c")) @[PktGen.scala 167:30]
                  node _T_163 = tail(_T_162, 1) @[PktGen.scala 167:30]
                  node _T_164 = sub(_T_163, UInt<2>("h02")) @[PktGen.scala 167:49]
                  node _T_165 = tail(_T_164, 1) @[PktGen.scala 167:49]
                  node _T_166 = sub(_T_165, UInt<3>("h04")) @[PktGen.scala 167:67]
                  node _T_167 = tail(_T_166, 1) @[PktGen.scala 167:67]
                  node _T_168 = sub(_T_167, UInt<1>("h01")) @[PktGen.scala 167:83]
                  node _T_169 = tail(_T_168, 1) @[PktGen.scala 167:83]
                  node _T_170 = eq(cntr, _T_169) @[PktGen.scala 167:18]
                  when _T_170 : @[PktGen.scala 167:90]
                    state <= UInt<4>("h08") @[PktGen.scala 168:15]
                    cntr <= UInt<1>("h00") @[PktGen.scala 169:14]
                    tx_data <= UInt<8>("h0ab") @[PktGen.scala 170:17]
                    skip @[PktGen.scala 167:90]
                  else : @[PktGen.scala 171:20]
                    node _T_171 = eq(io.payload_mode, UInt<1>("h00")) @[PktGen.scala 173:31]
                    when _T_171 : @[PktGen.scala 173:40]
                      tx_data <= UInt<7>("h05a") @[PktGen.scala 174:19]
                      skip @[PktGen.scala 173:40]
                    else : @[PktGen.scala 175:47]
                      node _T_172 = eq(io.payload_mode, UInt<1>("h01")) @[PktGen.scala 175:38]
                      when _T_172 : @[PktGen.scala 175:47]
                        node _T_173 = add(tx_data, UInt<1>("h01")) @[PktGen.scala 176:30]
                        node _T_174 = tail(_T_173, 1) @[PktGen.scala 176:30]
                        tx_data <= _T_174 @[PktGen.scala 176:19]
                        skip @[PktGen.scala 175:47]
                      else : @[PktGen.scala 177:47]
                        node _T_175 = eq(io.payload_mode, UInt<2>("h02")) @[PktGen.scala 177:38]
                        when _T_175 : @[PktGen.scala 177:47]
                          inst MaxPeriodFibonacciLFSR_2 of MaxPeriodFibonacciLFSR_2 @[PRNG.scala 82:22]
                          MaxPeriodFibonacciLFSR_2.clock <= clock
                          MaxPeriodFibonacciLFSR_2.reset <= reset
                          MaxPeriodFibonacciLFSR_2.io.seed.valid <= UInt<1>("h00") @[PRNG.scala 83:24]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[0] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[1] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[2] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[3] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[4] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[5] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[6] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[7] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[8] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[9] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[10] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[11] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[12] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[13] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[14] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.seed.bits[15] is invalid @[PRNG.scala 84:23]
                          MaxPeriodFibonacciLFSR_2.io.increment <= UInt<1>("h01") @[PRNG.scala 85:23]
                          node _T_176 = cat(MaxPeriodFibonacciLFSR_2.io.out[1], MaxPeriodFibonacciLFSR_2.io.out[0]) @[PRNG.scala 86:17]
                          node _T_177 = cat(MaxPeriodFibonacciLFSR_2.io.out[3], MaxPeriodFibonacciLFSR_2.io.out[2]) @[PRNG.scala 86:17]
                          node _T_178 = cat(_T_177, _T_176) @[PRNG.scala 86:17]
                          node _T_179 = cat(MaxPeriodFibonacciLFSR_2.io.out[5], MaxPeriodFibonacciLFSR_2.io.out[4]) @[PRNG.scala 86:17]
                          node _T_180 = cat(MaxPeriodFibonacciLFSR_2.io.out[7], MaxPeriodFibonacciLFSR_2.io.out[6]) @[PRNG.scala 86:17]
                          node _T_181 = cat(_T_180, _T_179) @[PRNG.scala 86:17]
                          node _T_182 = cat(_T_181, _T_178) @[PRNG.scala 86:17]
                          node _T_183 = cat(MaxPeriodFibonacciLFSR_2.io.out[9], MaxPeriodFibonacciLFSR_2.io.out[8]) @[PRNG.scala 86:17]
                          node _T_184 = cat(MaxPeriodFibonacciLFSR_2.io.out[11], MaxPeriodFibonacciLFSR_2.io.out[10]) @[PRNG.scala 86:17]
                          node _T_185 = cat(_T_184, _T_183) @[PRNG.scala 86:17]
                          node _T_186 = cat(MaxPeriodFibonacciLFSR_2.io.out[13], MaxPeriodFibonacciLFSR_2.io.out[12]) @[PRNG.scala 86:17]
                          node _T_187 = cat(MaxPeriodFibonacciLFSR_2.io.out[15], MaxPeriodFibonacciLFSR_2.io.out[14]) @[PRNG.scala 86:17]
                          node _T_188 = cat(_T_187, _T_186) @[PRNG.scala 86:17]
                          node _T_189 = cat(_T_188, _T_185) @[PRNG.scala 86:17]
                          node _T_190 = cat(_T_189, _T_182) @[PRNG.scala 86:17]
                          node _T_191 = bits(_T_190, 0, 0) @[LFSR.scala 41:16]
                          node _T_192 = bits(_T_190, 1, 1) @[LFSR.scala 41:16]
                          node _T_193 = bits(_T_190, 2, 2) @[LFSR.scala 41:16]
                          node _T_194 = bits(_T_190, 3, 3) @[LFSR.scala 41:16]
                          node _T_195 = bits(_T_190, 4, 4) @[LFSR.scala 41:16]
                          node _T_196 = bits(_T_190, 5, 5) @[LFSR.scala 41:16]
                          node _T_197 = bits(_T_190, 6, 6) @[LFSR.scala 41:16]
                          node _T_198 = bits(_T_190, 7, 7) @[LFSR.scala 41:16]
                          node _T_199 = bits(_T_190, 8, 8) @[LFSR.scala 41:16]
                          node _T_200 = bits(_T_190, 9, 9) @[LFSR.scala 41:16]
                          node _T_201 = bits(_T_190, 10, 10) @[LFSR.scala 41:16]
                          node _T_202 = bits(_T_190, 11, 11) @[LFSR.scala 41:16]
                          node _T_203 = bits(_T_190, 12, 12) @[LFSR.scala 41:16]
                          node _T_204 = bits(_T_190, 13, 13) @[LFSR.scala 41:16]
                          node _T_205 = bits(_T_190, 14, 14) @[LFSR.scala 41:16]
                          node _T_206 = bits(_T_190, 15, 15) @[LFSR.scala 41:16]
                          wire _T_207 : UInt<1>[16] @[LFSR.scala 39:12]
                          _T_207[0] <= _T_206 @[LFSR.scala 39:12]
                          _T_207[1] <= _T_205 @[LFSR.scala 39:12]
                          _T_207[2] <= _T_204 @[LFSR.scala 39:12]
                          _T_207[3] <= _T_203 @[LFSR.scala 39:12]
                          _T_207[4] <= _T_202 @[LFSR.scala 39:12]
                          _T_207[5] <= _T_201 @[LFSR.scala 39:12]
                          _T_207[6] <= _T_200 @[LFSR.scala 39:12]
                          _T_207[7] <= _T_199 @[LFSR.scala 39:12]
                          _T_207[8] <= _T_198 @[LFSR.scala 39:12]
                          _T_207[9] <= _T_197 @[LFSR.scala 39:12]
                          _T_207[10] <= _T_196 @[LFSR.scala 39:12]
                          _T_207[11] <= _T_195 @[LFSR.scala 39:12]
                          _T_207[12] <= _T_194 @[LFSR.scala 39:12]
                          _T_207[13] <= _T_193 @[LFSR.scala 39:12]
                          _T_207[14] <= _T_192 @[LFSR.scala 39:12]
                          _T_207[15] <= _T_191 @[LFSR.scala 39:12]
                          node _T_208 = cat(_T_207[1], _T_207[0]) @[LFSR.scala 43:8]
                          node _T_209 = cat(_T_207[3], _T_207[2]) @[LFSR.scala 43:8]
                          node _T_210 = cat(_T_209, _T_208) @[LFSR.scala 43:8]
                          node _T_211 = cat(_T_207[5], _T_207[4]) @[LFSR.scala 43:8]
                          node _T_212 = cat(_T_207[7], _T_207[6]) @[LFSR.scala 43:8]
                          node _T_213 = cat(_T_212, _T_211) @[LFSR.scala 43:8]
                          node _T_214 = cat(_T_213, _T_210) @[LFSR.scala 43:8]
                          node _T_215 = cat(_T_207[9], _T_207[8]) @[LFSR.scala 43:8]
                          node _T_216 = cat(_T_207[11], _T_207[10]) @[LFSR.scala 43:8]
                          node _T_217 = cat(_T_216, _T_215) @[LFSR.scala 43:8]
                          node _T_218 = cat(_T_207[13], _T_207[12]) @[LFSR.scala 43:8]
                          node _T_219 = cat(_T_207[15], _T_207[14]) @[LFSR.scala 43:8]
                          node _T_220 = cat(_T_219, _T_218) @[LFSR.scala 43:8]
                          node _T_221 = cat(_T_220, _T_217) @[LFSR.scala 43:8]
                          node _T_222 = cat(_T_221, _T_214) @[LFSR.scala 43:8]
                          tx_data <= _T_222 @[PktGen.scala 178:19]
                          skip @[PktGen.scala 177:47]
                        else : @[PktGen.scala 179:47]
                          node _T_223 = eq(io.payload_mode, UInt<2>("h03")) @[PktGen.scala 179:38]
                          when _T_223 : @[PktGen.scala 179:47]
                            node _T_224 = add(tx_data, UInt<4>("h08")) @[PktGen.scala 180:30]
                            node _T_225 = tail(_T_224, 1) @[PktGen.scala 180:30]
                            tx_data <= _T_225 @[PktGen.scala 180:19]
                            skip @[PktGen.scala 179:47]
                    node _T_226 = add(cntr, UInt<1>("h01")) @[PktGen.scala 182:22]
                    node _T_227 = tail(_T_226, 1) @[PktGen.scala 182:22]
                    cntr <= _T_227 @[PktGen.scala 182:14]
                    skip @[PktGen.scala 171:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_228 = eq(UInt<4>("h08"), state) @[Conditional.scala 37:30]
                  when _T_228 : @[Conditional.scala 39:67]
                    node _T_229 = eq(cntr, UInt<2>("h03")) @[PktGen.scala 186:18]
                    when _T_229 : @[PktGen.scala 186:33]
                      state <= UInt<4>("h01") @[PktGen.scala 187:15]
                      tx_en <= UInt<1>("h00") @[PktGen.scala 188:15]
                      tx_data <= UInt<1>("h00") @[PktGen.scala 189:17]
                      cntr <= UInt<1>("h00") @[PktGen.scala 190:14]
                      skip @[PktGen.scala 186:33]
                    else : @[PktGen.scala 191:20]
                      node _T_230 = add(cntr, UInt<1>("h01")) @[PktGen.scala 192:22]
                      node _T_231 = tail(_T_230, 1) @[PktGen.scala 192:22]
                      cntr <= _T_231 @[PktGen.scala 192:14]
                      node _T_232 = add(tx_data, UInt<1>("h01")) @[PktGen.scala 193:28]
                      node _T_233 = tail(_T_232, 1) @[PktGen.scala 193:28]
                      tx_data <= _T_233 @[PktGen.scala 193:17]
                      skip @[PktGen.scala 191:20]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_234 = eq(UInt<4>("h01"), state) @[Conditional.scala 37:30]
                    when _T_234 : @[Conditional.scala 39:67]
                      node _T_235 = sub(io.inter_frame_gap, UInt<1>("h01")) @[PktGen.scala 197:41]
                      node _T_236 = tail(_T_235, 1) @[PktGen.scala 197:41]
                      node _T_237 = sub(_T_236, UInt<1>("h01")) @[PktGen.scala 197:47]
                      node _T_238 = tail(_T_237, 1) @[PktGen.scala 197:47]
                      node _T_239 = eq(cntr, _T_238) @[PktGen.scala 197:18]
                      when _T_239 : @[PktGen.scala 197:54]
                        state <= UInt<4>("h00") @[PktGen.scala 198:15]
                        skip @[PktGen.scala 197:54]
                      else : @[PktGen.scala 199:20]
                        node _T_240 = add(cntr, UInt<1>("h01")) @[PktGen.scala 200:22]
                        node _T_241 = tail(_T_240, 1) @[PktGen.scala 200:22]
                        cntr <= _T_241 @[PktGen.scala 200:14]
                        skip @[PktGen.scala 199:20]
                      skip @[Conditional.scala 39:67]
    eth_fcs_padding.io.rx_en <= tx_en @[PktGen.scala 205:29]
    eth_fcs_padding.io.rx_dat <= tx_data @[PktGen.scala 206:29]
    io.send_done <= send_done @[PktGen.scala 208:16]
    io.tx_en <= eth_fcs_padding.io.tx_en @[PktGen.scala 210:14]
    io.tx_data <= eth_fcs_padding.io.tx_dat @[PktGen.scala 211:14]
    io.total_send_count <= total_send_count @[PktGen.scala 213:23]
    
